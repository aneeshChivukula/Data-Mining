from PIL import Image
import io
import math
import numpy
from os import listdir
import os
from shutil import copyfile
import sys
from scipy import stats
import numpy as np

width = 32
height = 32
length = 3073

# width = 224
# height = 224

#width = 300
#height = 100

def partitoner(Dir):
    os.chdir(Dir)
    
    InDir = Dir + 'LabelledData/'
    classdirs = ['BrownDog/','BlackDog/']

    TrainOutDir = Dir + 'TrainSplit/'
    TestOutDir = Dir + 'TestSplit/'

    for dir in classdirs:
        files = listdir(InDir + dir)
        
        splitind = int(math.floor(0.8*len(files)))
        trainfiles = files[0:splitind]
        testfiles = files[splitind:]
    
        for file in trainfiles:
            copyfile(InDir+dir+file, TrainOutDir+dir+file)

        for file in testfiles:
            copyfile(InDir+dir+file, TestOutDir+dir+file)


def resizer(CurrDir):
    os.chdir(CurrDir)
    for f in listdir(CurrDir):
        
        img = Image.open(f)
        print(img.size)
        image = img.resize((width,height), Image.ANTIALIAS)
        image.save(CurrDir + f)
        print(img.size)
        
        
# def colourtograyscale(InDir,OutDir):
#     os.chdir(InDir)
#     for f in listdir(InDir):
#         img = Image.open(f)
#         # http://stackoverflow.com/questions/12201577/how-can-i-convert-an-rgb-image-into-grayscale-in-python
#         # http://stackoverflow.com/questions/9506841/using-python-pil-to-turn-a-rgb-image-into-a-pure-black-and-white-image
        


def binarizer(CurrDir,ValDir,OutFile): 
    # resizer and binarizer have same directory
    # Pixel value is in the form (R,G,B) where R,G,B belongs in the range 0,255
    ind = 0
    L = []
    os.chdir(CurrDir)
    binfile = open(OutFile, 'wb')
    os.chdir(CurrDir + ValDir)
    ls = listdir(CurrDir + ValDir)
    ls.sort()
    for d in ls:
        os.chdir(CurrDir + ValDir + d)
        for f in listdir(CurrDir + ValDir + d):
            img = Image.open(f)
            l = numpy.insert(numpy.array(img.getdata()).flatten(order='F'),0, ind)
            if(len(l) == length):
                L.append(l)
        ind = ind + 1
    
    print(len(L)*length)
    print(len(numpy.concatenate(L)))
    
    numpy.concatenate(L).astype('int16').tofile(binfile)
#     file.write(numpy.concatenate(L).astype('int16'))
    binfile.close()
    
    
def generatereports():
#     rls = [(1, 0, 1, 0.5008010253123999, {'recall': 0.5127952755905512, 'fpr': 0.16724774405250206, 'f1score': 0.5008010253123999, 'precision': 0.48935504070131497, 'tpr': 0.5127952755905512}, 0), (0, 0, 1, 0.6223674655047204, {'recall': 0.8410206084396468, 'fpr': 0.07452678040913335, 'f1score': 0.6223674655047204, 'precision': 0.49394812680115274, 'tpr': 0.8410206084396468}, 0), (1.261150870056856, 0.5171407731582787, 0.25598990310142256, 0.5171407731582787, {'recall': 0.5283159463487332, 'fpr': 0.13661526294978252, 'f1score': 0.5171407731582787, 'precision': 0.5064285714285715, 'tpr': 0.5283159463487332}, 0), (1.2981137407009944, 0.5251798561151079, 0.22706611541411337, 0.5251798561151079, {'recall': 0.5423476968796433, 'fpr': 0.13929560743965175, 'f1score': 0.5251798561151079, 'precision': 0.5090655509065551, 'tpr': 0.5423476968796433}, 1), (1.2981137407009944, 0.5251798561151079, 0.22706611541411337, 0.5251798561151079, {'recall': 0.5423476968796433, 'fpr': 0.13929560743965175, 'f1score': 0.5251798561151079, 'precision': 0.5090655509065551, 'tpr': 0.5423476968796433}, 2), (0, 0.5251798561151079, 1.5251798561151078, 0.6334647079899678, {'recall': 0.8516377649325626, 'fpr': 0.07388199285835742, 'f1score': 0.6334647079899678, 'precision': 0.5042783799201369, 'tpr': 0.8516377649325626}, 3), (0, 0.5251798561151079, 1.5251798561151078, 0.6280575539568345, {'recall': 0.8500486854917235, 'fpr': 0.07474730315127835, 'f1score': 0.6280575539568345, 'precision': 0.4980034227039361, 'tpr': 0.8500486854917235}, 3)]
#     gen = 3
#     numgens = 10
#     numalphas = 20
#     myepsilon = 0.001
#     mylambda = 1
#     final_payoff = 1.2981137407009944

#     rls = [(1, 0, 1, 0.5023211141347848, {'recall': 0.5135842880523731, 'fpr': 0.16654694715238583, 'f1score': 0.5023211141347848, 'precision': 0.49154135338345867, 'tpr': 0.5135842880523731}, 0), (0, 0, 1, 0.6268980477223427, {'recall': 0.8458536585365853, 'fpr': 0.07422505307855626, 'f1score': 0.6268980477223427, 'precision': 0.49798966111430215, 'tpr': 0.8458536585365853}, 0), (1.2612787655263276, 0.5346112886048988, 0.27333252307857125, 0.5346112886048988, {'recall': 0.555719557195572, 'fpr': 0.14053518334985135, 'f1score': 0.5346112886048988, 'precision': 0.5150478796169631, 'tpr': 0.555719557195572}, 0), (1.2548944738611418, 0.5183836912995996, 0.26348921743845777, 0.5183836912995996, {'recall': 0.530156366344006, 'fpr': 0.1368400237294839, 'f1score': 0.5183836912995996, 'precision': 0.5071225071225072, 'tpr': 0.530156366344006}, 1), (1.213784390606654, 0.5161290322580645, 0.3023446416514104, 0.5161290322580645, {'recall': 0.5230312035661219, 'fpr': 0.13415116739216462, 'f1score': 0.5161290322580645, 'precision': 0.5094066570188133, 'tpr': 0.5230312035661219}, 2), (1.1541369357660634, 0.5228758169934641, 0.3687388812274006, 0.5228758169934641, {'recall': 0.5325443786982249, 'fpr': 0.13510301109350237, 'f1score': 0.5228758169934641, 'precision': 0.5135520684736091, 'tpr': 0.5325443786982249}, 3), (1.1541369357660634, 0.5228758169934641, 0.3687388812274006, 0.5228758169934641, {'recall': 0.5325443786982249, 'fpr': 0.13510301109350237, 'f1score': 0.5228758169934641, 'precision': 0.5135520684736091, 'tpr': 0.5325443786982249}, 4), (0, 0.5228758169934641, 1.522875816993464, 0.6276060388209921, {'recall': 0.8533724340175953, 'fpr': 0.07523138320455125, 'f1score': 0.6276060388209921, 'precision': 0.496304718590108, 'tpr': 0.8533724340175953}, 5), (0, 0.5228758169934641, 1.522875816993464, 0.6211135213304411, {'recall': 0.8504950495049505, 'fpr': 0.07608142493638677, 'f1score': 0.6211135213304411, 'precision': 0.4891799544419134, 'tpr': 0.8504950495049505}, 5)]
#     gen = 5
#     numgens = 10
#     numalphas = 20
#     myepsilon = 0.0001
#     mylambda = 1
#     final_payoff = 1.1541369357660634
 
#     rls = [(1, 0, 1, 0.5114878783077167, {'recall': 0.5238558909444986, 'fpr': 0.1662722502315053, 'f1score': 0.5114878783077167, 'precision': 0.4996904024767802, 'tpr': 0.5238558909444986}, 0), (0, 0, 1, 0.6286539155539517, {'recall': 0.8481012658227848, 'fpr': 0.07415272233075682, 'f1score': 0.6286539155539517, 'precision': 0.4994266055045872, 'tpr': 0.8481012658227848}, 0), (0.7453612461976168, 0.05208863058481657, 0.3067273843871997, 0.5208863058481656, {'recall': 0.532293986636971, 'fpr': 0.1363546408074411, 'f1score': 0.5208863058481656, 'precision': 0.5099573257467994, 'tpr': 0.532293986636971}, 0), (0.7379801618702354, 0.05373665480427047, 0.31575649293403496, 0.5373665480427047, {'recall': 0.5527086383601757, 'fpr': 0.13686928883591576, 'f1score': 0.5373665480427047, 'precision': 0.5228531855955678, 'tpr': 0.5527086383601757}, 1), (0.6984292027158623, 0.05024082993701371, 0.35181162722115134, 0.5024082993701371, {'recall': 0.5124716553287982, 'fpr': 0.13748276541264526, 'f1score': 0.5024082993701371, 'precision': 0.49273255813953487, 'tpr': 0.5124716553287982}, 2), (0.6984292027158623, 0.05024082993701371, 0.35181162722115134, 0.5024082993701371, {'recall': 0.5124716553287982, 'fpr': 0.13748276541264526, 'f1score': 0.5024082993701371, 'precision': 0.49273255813953487, 'tpr': 0.5124716553287982}, 3), (0, 0.05024082993701371, 1.0502408299370136, 0.6289803220035778, {'recall': 0.860078277886497, 'fpr': 0.07590422822210902, 'f1score': 0.6289803220035778, 'precision': 0.4957698815566836, 'tpr': 0.860078277886497}, 4), (0, 0.05024082993701371, 1.0502408299370136, 0.6198406951484432, {'recall': 0.8475247524752475, 'fpr': 0.07599660729431722, 'f1score': 0.6198406951484432, 'precision': 0.4885844748858447, 'tpr': 0.8475247524752475}, 4)]
#     gen = 4
#     numgens = 10
#     numalphas = 20
#     myepsilon = 0.0001
#     mylambda = 0.1
#     final_payoff = 0.6984292027158623
 
#     rls = [(1, 0, 1, 0.508301404853129, {'recall': 0.5158781594296824, 'fpr': 0.16326950792670372, 'f1score': 0.508301404853129, 'precision': 0.500943989930774, 'tpr': 0.5158781594296824}, 0), (0, 0, 1, 0.6295364714337046, {'recall': 0.8504854368932039, 'fpr': 0.07451146983857264, 'f1score': 0.6295364714337046, 'precision': 0.4997147746719909, 'tpr': 0.8504854368932039}, 0), (1.3159476296722432, 0.5241528478731075, 0.20820521820086424, 0.5241528478731075, {'recall': 0.5401188707280832, 'fpr': 0.13870201820340325, 'f1score': 0.5241528478731075, 'precision': 0.5091036414565826, 'tpr': 0.5401188707280832}, 0), (1.27991153365847, 0.5305826999638075, 0.25067116630533737, 0.5305826999638075, {'recall': 0.535427319211103, 'fpr': 0.1313854104551779, 'f1score': 0.5305826999638075, 'precision': 0.5258249641319943, 'tpr': 0.535427319211103}, 1), (1.27991153365847, 0.5305826999638075, 0.25067116630533737, 0.5305826999638075, {'recall': 0.535427319211103, 'fpr': 0.1313854104551779, 'f1score': 0.5305826999638075, 'precision': 0.5258249641319943, 'tpr': 0.535427319211103}, 2), (0, 0.5305826999638075, 1.5305826999638075, 0.6349319971367215, {'recall': 0.8553519768563163, 'fpr': 0.07396072430502423, 'f1score': 0.6349319971367215, 'precision': 0.5048377916903813, 'tpr': 0.8553519768563163}, 3), (0, 0.5305826999638075, 1.5305826999638075, 0.6240928882438317, {'recall': 0.8414872798434442, 'fpr': 0.07420614705382918, 'f1score': 0.6240928882438317, 'precision': 0.49596309111880044, 'tpr': 0.8414872798434442}, 3)]
#     gen = 3
#     numgens = 20
#     numalphas = 100
#     myepsilon = 0.0001
#     mylambda = 1
#     final_payoff = 1.27991153365847


#     rls = [(1, 0, 1, 0.5856910569105691, {'recall': 0.5856910569105691, 'fpr': 0.17902313624678665, 'f1score': 0.5443554480882575, 'precision': 0.5084697910784868, 'tpr': 0.5856910569105691}, 0), (0, 0, 1, 0.8013500482160077, {'recall': 0.8013500482160077, 'fpr': 0.13015387231148517, 'f1score': 0.4889673433362754, 'precision': 0.35182049110922947, 'tpr': 0.8013500482160077}, 0), (3.363583381722767, 2.6067961165048543, 0.24321273478208738, 0.5213592233009708, {'recall': 0.5213592233009708, 'fpr': 0.16498455200823892, 'f1score': 0.5111851499286054, 'precision': 0.5014005602240896, 'tpr': 0.5213592233009708}, 0), (3.363583381722767, 2.6067961165048543, 0.24321273478208738, 0.5213592233009708, {'recall': 0.5213592233009708, 'fpr': 0.16498455200823892, 'f1score': 0.5111851499286054, 'precision': 0.5014005602240896, 'tpr': 0.5213592233009708}, 1), (3.363583381722767, 2.6067961165048543, 0.24321273478208738, 0.8250728862973761, {'recall': 0.8250728862973761, 'fpr': 0.2086483731203806, 'f1score': 0.39178587909552376, 'precision': 0.2568835098335855, 'tpr': 0.8250728862973761}, 2), (3.363583381722767, 2.6067961165048543, 0.24321273478208738, 0.8488714425907753, {'recall': 0.8488714425907753, 'fpr': 0.08488243782361429, 'f1score': 0.5998613037447988, 'precision': 0.46380697050938335, 'tpr': 0.8488714425907753}, 2)]
#     gen = 2
#     numgens = 20
#     numalphas = 20
#     myepsilon = 0.0001
#     mylambda = 5
#     final_payoff = 3.363583381722767

#     rls = [(1, 0, 1, 0.6054776654711445, {'recall': 0.6054776654711445, 'fpr': 0.18319120517825954, 'f1score': 0.5537498136275533, 'precision': 0.5101648351648351, 'tpr': 0.6054776654711445}, 0), (0, 0, 1, 0.8079601990049752, {'recall': 0.8079601990049752, 'fpr': 0.13225943196269604, 'f1score': 0.4809002072845721, 'precision': 0.342327150084317, 'tpr': 0.8079601990049752}, 0), (6.127252532218103, 5.349740932642487, 0.22248840042438456, 0.5349740932642487, {'recall': 0.5349740932642487, 'fpr': 0.16989291598023065, 'f1score': 0.5170579029733959, 'precision': 0.5003028467595396, 'tpr': 0.5349740932642487}, 0), (6.127252532218103, 5.349740932642487, 0.22248840042438456, 0.5349740932642487, {'recall': 0.5349740932642487, 'fpr': 0.16989291598023065, 'f1score': 0.5170579029733959, 'precision': 0.5003028467595396, 'tpr': 0.5349740932642487}, 1), (6.127252532218103, 5.349740932642487, 0.22248840042438456, 0.831041257367387, {'recall': 0.831041257367387, 'fpr': 0.1116958071634697, 'f1score': 0.5320754716981132, 'precision': 0.391304347826087, 'tpr': 0.831041257367387}, 2), (6.127252532218103, 5.349740932642487, 0.22248840042438456, 0.8449612403100775, {'recall': 0.8449612403100775, 'fpr': 0.07741332426920462, 'f1score': 0.6195381882770871, 'precision': 0.4890633763320247, 'tpr': 0.8449612403100775}, 2)]
#     gen = 2
#     numgens = 20
#     numalphas = 20
#     myepsilon = 0.0001
#     mylambda = 10
#     final_payoff = 6.127252532218103
 
#     rls = [(1, 0, 1, 0.6004507405022537, {'recall': 0.6004507405022537, 'fpr': 0.176810398184444, 'f1score': 0.5579655946148093, 'precision': 0.5210952780106175, 'tpr': 0.6004507405022537}, 0), (0, 0, 1, 0.7967244701348748, {'recall': 0.7967244701348748, 'fpr': 0.11945247406903588, 'f1score': 0.5058103975535169, 'precision': 0.37051971326164873, 'tpr': 0.7967244701348748}, 0), (0.9312022099987701, 0.3583955829814875, 0.4271933729827174, 0.716791165962975, {'recall': 0.716791165962975, 'fpr': 0.22065631107910708, 'f1score': 0.5939981160005383, 'precision': 0.5071231617647058, 'tpr': 0.716791165962975}, 0), (0.9312022099987701, 0.3583955829814875, 0.4271933729827174, 0.716791165962975, {'recall': 0.716791165962975, 'fpr': 0.22065631107910708, 'f1score': 0.5939981160005383, 'precision': 0.5071231617647058, 'tpr': 0.716791165962975}, 1), (0.9312022099987701, 0.3583955829814875, 0.4271933729827174, 0.7902439024390244, {'recall': 0.7902439024390244, 'fpr': 0.2783864118895966, 'f1score': 0.3168394289067084, 'precision': 0.19814090019569472, 'tpr': 0.7902439024390244}, 2), (0.9312022099987701, 0.3583955829814875, 0.4271933729827174, 0.8099415204678363, {'recall': 0.8099415204678363, 'fpr': 0.1597587905554612, 'f1score': 0.4446227929373997, 'precision': 0.3064159292035398, 'tpr': 0.8099415204678363}, 2)]
#     gen = 2
#     numgens = 20
#     numalphas = 20
#     myepsilon = 0.0001
#     mylambda = 0.5
#     final_payoff = 0.9312022099987701
 
#     rls = [(1, 0, 1, 0.6026597469996756, {'recall': 0.6026597469996756, 'fpr': 0.17700936503035916, 'f1score': 0.5578741930641045, 'precision': 0.519284516489659, 'tpr': 0.6026597469996756}, 0), (0, 0, 1, 0.8170254403131115, {'recall': 0.8170254403131115, 'fpr': 0.13652572592969944, 'f1score': 0.481962481962482, 'precision': 0.3417928776094965, 'tpr': 0.8170254403131115}, 0), (6.228078541076723, 5.647058823529411, 0.41898028245268826, 0.5647058823529412, {'recall': 0.5647058823529412, 'fpr': 0.17679671457905544, 'f1score': 0.5308755760368664, 'precision': 0.5008695652173913, 'tpr': 0.5647058823529412}, 0), (6.5879960730072655, 5.940983606557378, 0.35298753355011225, 0.5940983606557377, {'recall': 0.5940983606557377, 'fpr': 0.18471794871794872, 'f1score': 0.5438991445294912, 'precision': 0.5015222806531968, 'tpr': 0.5940983606557377}, 1), (9.930350804077625, 9.246018849528761, 0.3156680454511367, 0.9246018849528762, {'recall': 0.9246018849528762, 'fpr': 0.3210943124550036, 'f1score': 0.6291463954002654, 'precision': 0.4767890062007709, 'tpr': 0.9246018849528762}, 2), (9.930350804077625, 9.246018849528761, 0.3156680454511367, 0.9246018849528762, {'recall': 0.9246018849528762, 'fpr': 0.3210943124550036, 'f1score': 0.6291463954002654, 'precision': 0.4767890062007709, 'tpr': 0.9246018849528762}, 3), (9.930350804077625, 9.246018849528761, 0.3156680454511367, 0.7, {'recall': 0.7, 'fpr': 0.3576890399320306, 'f1score': 0.24190572051669182, 'precision': 0.14621780571892112, 'tpr': 0.7}, 4), (9.930350804077625, 9.246018849528761, 0.3156680454511367, 0.8568646543330087, {'recall': 0.8568646543330087, 'fpr': 0.07551176420623461, 'f1score': 0.6294706723891274, 'precision': 0.497456189937818, 'tpr': 0.8568646543330087}, 4)]
#     gen = 4
#     numgens = 20
#     numalphas = 50
#     myepsilon = 0.0001
#     mylambda = 10
#     final_payoff = 9.930350804077625
 
#     rls = [(1, 0, 1, 0.5755418958265933, {'recall': 0.5755418958265933, 'fpr': 0.17458028633226902, 'f1score': 0.541964965727342, 'precision': 0.5120898100172712, 'tpr': 0.5755418958265933}, 0), (0, 0, 1, 0.8154296875, {'recall': 0.8154296875, 'fpr': 0.13612432065217392, 'f1score': 0.4823801270941652, 'precision': 0.3424938474159147, 'tpr': 0.8154296875}, 0), (6.313700201551771, 5.651612903225807, 0.3379127016740364, 0.5651612903225807, {'recall': 0.5651612903225807, 'fpr': 0.17051546391752578, 'f1score': 0.538579772517676, 'precision': 0.5143863769817968, 'tpr': 0.5651612903225807}, 0), (8.290367996601207, 7.940026075619296, 0.6496580790180904, 0.7940026075619296, {'recall': 0.7940026075619296, 'fpr': 0.23479243732018085, 'f1score': 0.6254974964693799, 'precision': 0.5159923744969286, 'tpr': 0.7940026075619296}, 1), (6.932056298963911, 6.685100845803513, 0.7530445468396021, 0.6685100845803513, {'recall': 0.6685100845803513, 'fpr': 0.18537939543491672, 'f1score': 0.5929024812463936, 'precision': 0.5326594090202177, 'tpr': 0.6685100845803513}, 2), (9.534734166208114, 9.174725983236621, 0.6399918170285073, 0.9174725983236621, {'recall': 0.9174725983236621, 'fpr': 0.3109919571045576, 'f1score': 0.6349843819723338, 'precision': 0.4854998294097578, 'tpr': 0.9174725983236621}, 3), (9.534734166208114, 9.174725983236621, 0.6399918170285073, 0.9174725983236621, {'recall': 0.9174725983236621, 'fpr': 0.3109919571045576, 'f1score': 0.6349843819723338, 'precision': 0.4854998294097578, 'tpr': 0.9174725983236621}, 4), (9.534734166208114, 9.174725983236621, 0.6399918170285073, 0.6702439024390244, {'recall': 0.6702439024390244, 'fpr': 0.40535031847133757, 'f1score': 0.21187355435620664, 'precision': 0.12582417582417582, 'tpr': 0.6702439024390244}, 5), (9.534734166208114, 9.174725983236621, 0.6399918170285073, 0.8218780251694094, {'recall': 0.8218780251694094, 'fpr': 0.0758902014107249, 'f1score': 0.6118918918918919, 'precision': 0.4873708381171068, 'tpr': 0.8218780251694094}, 5)]
#     gen = 5
#     numgens = 20
#     numalphas = 100
#     myepsilon = 0.0001
#     mylambda = 10
#     final_payoff = 9.534734166208114
 
#     rls = [(1, 0, 1, 0.5896272285251215, {'recall': 0.5896272285251215, 'fpr': 0.17756047349459597, 'f1score': 0.5488007240911148, 'precision': 0.5132618510158014, 'tpr': 0.5896272285251215}, 0), (0, 0, 1, 0.8338164251207729, {'recall': 0.8338164251207729, 'fpr': 0.12571185720356992, 'f1score': 0.5111045306485046, 'precision': 0.36848847139197266, 'tpr': 0.8338164251207729}, 0), (0.832466068465521, 0.05302931596091205, 0.22056324749539113, 0.5302931596091205, {'recall': 0.5302931596091205, 'fpr': 0.17183967112024667, 'f1score': 0.5111459968602826, 'precision': 0.49333333333333335, 'tpr': 0.5302931596091205}, 0), (0.8123201244040121, 0.054739566483338734, 0.24241944207932664, 0.5473956648333873, {'recall': 0.5473956648333873, 'fpr': 0.1706663920074158, 'f1score': 0.5254658385093167, 'precision': 0.5052254404299791, 'tpr': 0.5473956648333873}, 1), (0.7922422182428226, 0.055030934549006844, 0.26278871630618417, 0.5503093454900684, {'recall': 0.5503093454900684, 'fpr': 0.17401582896495016, 'f1score': 0.5237062286953827, 'precision': 0.4995566065622229, 'tpr': 0.5503093454900684}, 2), (0.7879342938856537, 0.05298869143780291, 0.2650543975521491, 0.529886914378029, {'recall': 0.529886914378029, 'fpr': 0.16682122617207626, 'f1score': 0.5162102612527542, 'precision': 0.5032218471923903, 'tpr': 0.529886914378029}, 3), (0.7308809800749607, 0.05471391417425228, 0.3238329340992916, 0.5471391417425228, {'recall': 0.5471391417425228, 'fpr': 0.1729740847387906, 'f1score': 0.5225896599906846, 'precision': 0.500148588410104, 'tpr': 0.5471391417425228}, 4), (0.7308809800749607, 0.05471391417425228, 0.3238329340992916, 0.5471391417425228, {'recall': 0.5471391417425228, 'fpr': 0.1729740847387906, 'f1score': 0.5225896599906846, 'precision': 0.500148588410104, 'tpr': 0.5471391417425228}, 5), (0.7308809800749607, 0.05471391417425228, 0.3238329340992916, 0.7253176930596286, {'recall': 0.7253176930596286, 'fpr': 0.28827375392714616, 'f1score': 0.2875968992248062, 'precision': 0.1793570219966159, 'tpr': 0.7253176930596286}, 6), (0.7308809800749607, 0.05471391417425228, 0.3238329340992916, 0.8431752178121975, {'recall': 0.8431752178121975, 'fpr': 0.0744454831307895, 'f1score': 0.6266187050359712, 'precision': 0.4985689753863766, 'tpr': 0.8431752178121975}, 6)]
#     gen = 6
#     numgens = 20
#     numalphas = 100
#     myepsilon = 0.0001
#     mylambda = 0.1
#     final_payoff = 0.7308809800749607
 
#     rls = [(1, 0, 1, 0.5717085919634106, {'recall': 0.5717085919634106, 'fpr': 0.16942191190060582, 'f1score': 0.5417118093174431, 'precision': 0.5147058823529411, 'tpr': 0.5717085919634106}, 0), (0, 0, 1, 0.8114511352418559, {'recall': 0.8114511352418559, 'fpr': 0.12216849071010435, 'f1score': 0.5019847328244275, 'precision': 0.363395225464191, 'tpr': 0.8114511352418559}, 0), (0.7669423522023653, 0.0051666666666666675, 0.23822431446430148, 0.5166666666666667, {'recall': 0.5166666666666667, 'fpr': 0.1688911704312115, 'f1score': 0.5030225898822781, 'precision': 0.49008059516429014, 'tpr': 0.5166666666666667}, 0), (0.7669423522023653, 0.0051666666666666675, 0.23822431446430148, 0.5166666666666667, {'recall': 0.5166666666666667, 'fpr': 0.1688911704312115, 'f1score': 0.5030225898822781, 'precision': 0.49008059516429014, 'tpr': 0.5166666666666667}, 1), (0.7669423522023653, 0.0051666666666666675, 0.23822431446430148, 0.7196896217264791, {'recall': 0.7196896217264791, 'fpr': 0.31430028039765484, 'f1score': 0.2711988304093567, 'precision': 0.16707948660211663, 'tpr': 0.7196896217264791}, 2), (0.7669423522023653, 0.0051666666666666675, 0.23822431446430148, 0.8352941176470589, {'recall': 0.8352941176470589, 'fpr': 0.07758913412563667, 'f1score': 0.6116295764536971, 'precision': 0.4824462061155153, 'tpr': 0.8352941176470589}, 2)]
#     gen = 2
#     numgens = 20
#     numalphas = 50
#     myepsilon = 0.0001
#     mylambda = 0.01
#     final_payoff = 0.7669423522023653

#     rls = [(1, 0, 1, 0.5887758450935346, {'recall': 0.5887758450935346, 'fpr': 0.17820157900133293, 'f1score': 0.5453716370269038, 'precision': 0.5079275198187996, 'tpr': 0.5887758450935346}, 0), (0, 0, 1, 0.8250244379276638, {'recall': 0.8250244379276638, 'fpr': 0.138320455124395, 'f1score': 0.482837528604119, 'precision': 0.34128588758592804, 'tpr': 0.8250244379276638}, 0), (3.4820668328792945, 2.7661999348746336, 0.28413310199533903, 0.5532399869749267, {'recall': 0.5532399869749267, 'fpr': 0.1752492548052215, 'f1score': 0.5247876447876448, 'precision': 0.4991186839012926, 'tpr': 0.5532399869749267}, 0), (3.4189565263794734, 2.6940639269406392, 0.2751074005611658, 0.5388127853881278, {'recall': 0.5388127853881278, 'fpr': 0.17279638380932813, 'f1score': 0.51625, 'precision': 0.495500899820036, 'tpr': 0.5388127853881278}, 1), (3.361784726560024, 2.6949317738791425, 0.3331470473191187, 0.5389863547758285, {'recall': 0.5389863547758285, 'fpr': 0.17280394980456695, 'f1score': 0.5170640486208509, 'precision': 0.4968553459119497, 'tpr': 0.5389863547758285}, 2), (4.641854103128575, 4.292437520285621, 0.6505834171570459, 0.8584875040571243, {'recall': 0.8584875040571243, 'fpr': 0.2957094351270707, 'f1score': 0.6151162790697674, 'precision': 0.4792534879507157, 'tpr': 0.8584875040571243}, 3), (4.641854103128575, 4.292437520285621, 0.6505834171570459, 0.8584875040571243, {'recall': 0.8584875040571243, 'fpr': 0.2957094351270707, 'f1score': 0.6151162790697674, 'precision': 0.4792534879507157, 'tpr': 0.8584875040571243}, 4), (4.641854103128575, 4.292437520285621, 0.6505834171570459, 0.7409579667644184, {'recall': 0.7409579667644184, 'fpr': 0.26611191305086185, 'f1score': 0.30844354018311293, 'precision': 0.1947584789311408, 'tpr': 0.7409579667644184}, 5), (4.641854103128575, 4.292437520285621, 0.6505834171570459, 0.8571428571428571, {'recall': 0.8571428571428571, 'fpr': 0.09184192672998644, 'f1score': 0.584771573604061, 'precision': 0.4437596302003082, 'tpr': 0.8571428571428571}, 5)]
#     gen = 5
#     numgens = 20
#     numalphas = 50
#     myepsilon = 0.0001
#     mylambda = 5
#     final_payoff = 4.641854103128575

#     rls = [(1, 0, 1, 0.592156862745098, {'recall': 0.592156862745098, 'fpr': 0.17874743326488707, 'f1score': 0.5480114925147437, 'precision': 0.5099915564311849, 'tpr': 0.592156862745098}, 0), (0, 0, 1, 0.810126582278481, {'recall': 0.810126582278481, 'fpr': 0.12910897817038988, 'f1score': 0.49245338857650195, 'precision': 0.35374149659863946, 'tpr': 0.810126582278481}, 0), (0.8664487232624751, 0.10628238341968912, 0.23983366015721397, 0.5314119170984456, {'recall': 0.5314119170984456, 'fpr': 0.17030477759472817, 'f1score': 0.5141782860723798, 'precision': 0.49802731411229134, 'tpr': 0.5314119170984456}, 0), (0.8664487232624751, 0.10628238341968912, 0.23983366015721397, 0.5314119170984456, {'recall': 0.5314119170984456, 'fpr': 0.17030477759472817, 'f1score': 0.5141782860723798, 'precision': 0.49802731411229134, 'tpr': 0.5314119170984456}, 1), (0.8664487232624751, 0.10628238341968912, 0.23983366015721397, 0.7771260997067448, {'recall': 0.7771260997067448, 'fpr': 0.2864057060371911, 'f1score': 0.3062993642843383, 'precision': 0.19073896353166986, 'tpr': 0.7771260997067448}, 2), (0.8664487232624751, 0.10628238341968912, 0.23983366015721397, 0.842, {'recall': 0.842, 'fpr': 0.08237288135593221, 'f1score': 0.5984363894811656, 'precision': 0.46416758544652703, 'tpr': 0.842}, 2)]
#     gen = 2
#     numgens = 20
#     numalphas = 100
#     myepsilon = 0.0001
#     mylambda = 0.2
#     final_payoff = 0.8664487232624751
 
#     rls = [(1, 0, 1, 0.590715920235371, {'recall': 0.590715920235371, 'fpr': 0.18150087260034903, 'f1score': 0.5447693699125716, 'precision': 0.5054545454545455, 'tpr': 0.590715920235371}, 0), (0, 0, 1, 0.8017664376840039, {'recall': 0.8017664376840039, 'fpr': 0.1325014854426619, 'f1score': 0.4810126582278481, 'precision': 0.3435660218671152, 'tpr': 0.8017664376840039}, 0), (11.776053594301853, 11.06562703053931, 0.28957343623745757, 0.5532813515269656, {'recall': 0.5532813515269656, 'fpr': 0.1734211067681547, 'f1score': 0.526673882789547, 'precision': 0.5025081144880496, 'tpr': 0.5532813515269656}, 0), (11.776053594301853, 11.06562703053931, 0.28957343623745757, 0.5532813515269656, {'recall': 0.5532813515269656, 'fpr': 0.1734211067681547, 'f1score': 0.526673882789547, 'precision': 0.5025081144880496, 'tpr': 0.5532813515269656}, 1), (11.776053594301853, 11.06562703053931, 0.28957343623745757, 0.8490749756572541, {'recall': 0.8490749756572541, 'fpr': 0.1945978085449758, 'f1score': 0.4162291169451074, 'precision': 0.2756876383180525, 'tpr': 0.8490749756572541}, 2), (11.776053594301853, 11.06562703053931, 0.28957343623745757, 0.8435972629521017, {'recall': 0.8435972629521017, 'fpr': 0.0816846395516685, 'f1score': 0.6060393258426966, 'precision': 0.4728767123287671, 'tpr': 0.8435972629521017}, 2)]
#     gen = 2
#     numgens = 20
#     numalphas = 100
#     myepsilon = 0.0001
#     mylambda = 20
#     final_payoff = 11.776053594301853

#     rls = 
#     gen = 
#     numgens = 
#     numalphas = 
#     myepsilon = 
#     mylambda = 
#     final_payoff = 

# Following are results for experiment when error is 1-recall

#     rls = [(1, 0, 1, 0.586105675146771, {'recall': 0.586105675146771, 'fpr': 0.1776248202177933, 'f1score': 0.5452063106796117, 'precision': 0.5096426545660806, 'tpr': 0.586105675146771}, 0), (0, 0, 1, 0.8166828322017459, {'recall': 0.8166828322017459, 'fpr': 0.1325516186591894, 'f1score': 0.4905330614622779, 'precision': 0.350541215653622, 'tpr': 0.8166828322017459}, 0), (1.1780682070157824, 0.47693307342430147, 0.29886486640851917, 0.5230669265756985, {'recall': 0.5230669265756985, 'fpr': 0.16467804978399506, 'f1score': 0.5120050882493242, 'precision': 0.5014014325755216, 'tpr': 0.5230669265756985}, 0), (1.2807443361825106, 0.632952691680261, 0.3522083554977504, 0.367047308319739, {'recall': 0.367047308319739, 'fpr': 0.4611196712891628, 'f1score': 0.25924645696508813, 'precision': 0.20039187744923406, 'tpr': 0.367047308319739}, 1), (1.2807443361825106, 0.632952691680261, 0.3522083554977504, 0.367047308319739, {'recall': 0.367047308319739, 'fpr': 0.4611196712891628, 'f1score': 0.25924645696508813, 'precision': 0.20039187744923406, 'tpr': 0.367047308319739}, 2), (1.2807443361825106, 0.632952691680261, 0.3522083554977504, 0.7064579256360078, {'recall': 0.7064579256360078, 'fpr': 0.25921209033791814, 'f1score': 0.30102147175317906, 'precision': 0.19125827814569538, 'tpr': 0.7064579256360078}, 3), (1.2807443361825106, 0.632952691680261, 0.3522083554977504, 0.8462291870714985, {'recall': 0.8462291870714985, 'fpr': 0.07861448340266576, 'f1score': 0.6147278548559232, 'precision': 0.48268156424581005, 'tpr': 0.8462291870714985}, 3)]
#     gen = 3
#     numgens = 20 
#     numalphas = 10
#     myepsilon = 0.0001
#     mylambda = 1
#     final_payoff = 1.2807443361825106

#     rls = [(1, 0, 1, 0.5706840390879478, {'recall': 0.5706840390879478, 'fpr': 0.17800616649537512, 'f1score': 0.5346353371986573, 'precision': 0.5028702640642939, 'tpr': 0.5706840390879478}, 0), (0, 0, 1, 0.8305905130687319, {'recall': 0.8305905130687319, 'fpr': 0.10835387099515595, 'f1score': 0.542008843967151, 'precision': 0.4022503516174402, 'tpr': 0.8305905130687319}, 0), (5.576203915910264, 4.915254237288136, 0.33905032137787217, 0.5084745762711864, {'recall': 0.5084745762711864, 'fpr': 0.16337854500616522, 'f1score': 0.5017690575747829, 'precision': 0.49523809523809526, 'tpr': 0.5084745762711864}, 0), (8.439891588190555, 8.121349772874757, 0.6814581846842014, 0.18786502271252434, {'recall': 0.18786502271252434, 'fpr': 0.46213212595184194, 'f1score': 0.14205103042198233, 'precision': 0.11420118343195267, 'tpr': 0.18786502271252434}, 1), (8.439891588190555, 8.121349772874757, 0.6814581846842014, 0.18786502271252434, {'recall': 0.18786502271252434, 'fpr': 0.46213212595184194, 'f1score': 0.14205103042198233, 'precision': 0.11420118343195267, 'tpr': 0.18786502271252434}, 2), (8.439891588190555, 8.121349772874757, 0.6814581846842014, 0.6804619826756496, {'recall': 0.6804619826756496, 'fpr': 0.37785902559306184, 'f1score': 0.2284329563812601, 'precision': 0.13725490196078433, 'tpr': 0.6804619826756496}, 3), (8.439891588190555, 8.121349772874757, 0.6814581846842014, 0.8493150684931506, {'recall': 0.8493150684931506, 'fpr': 0.0748853795211411, 'f1score': 0.6262626262626263, 'precision': 0.496, 'tpr': 0.8493150684931506}, 3)]
#     gen = 3
#     numgens = 20
#     numalphas = 50
#     myepsilon = 0.0001
#     mylambda = 10
#     final_payoff = 8.439891588190555
 
    rls = [(1, 0, 1, 0.6, {'recall': 0.6, 'fpr': 0.176464542651593, 'f1score': 0.5557399306079348, 'precision': 0.5175611126720989, 'tpr': 0.6}, 0), (0, 0, 1, 0.8299516908212561, {'recall': 0.8299516908212561, 'fpr': 0.1317467063323417, 'f1score': 0.4988385598141696, 'precision': 0.35657949356579494, 'tpr': 0.8299516908212561}, 0), (10.632242406180278, 9.993485342019543, 0.3612429358392646, 0.5003257328990228, {'recall': 0.5003257328990228, 'fpr': 0.16073997944501542, 'f1score': 0.4978930307941653, 'precision': 0.49548387096774194, 'tpr': 0.5003257328990228}, 0), (17.317661081614002, 16.975169300225733, 0.6575082186117314, 0.15124153498871332, {'recall': 0.15124153498871332, 'fpr': 0.5523249819569028, 'f1score': 0.1050744931107875, 'precision': 0.0805012015104703, 'tpr': 0.15124153498871332}, 1), (14.284966059257641, 13.680760406424124, 0.39579434716648265, 0.31596197967879386, {'recall': 0.31596197967879386, 'fpr': 0.3541901733511129, 'f1score': 0.258168184252812, 'precision': 0.2182476794204211, 'tpr': 0.31596197967879386}, 2), (15.261417308524516, 14.947780678851174, 0.6863633703266583, 0.25261096605744127, {'recall': 0.25261096605744127, 'fpr': 0.5028759244042728, 'f1score': 0.17723837874971377, 'precision': 0.1365079365079365, 'tpr': 0.25261096605744127}, 3), (19.931919382044768, 19.49119373776908, 0.5592743557243125, 0.025440313111545987, {'recall': 0.025440313111545987, 'fpr': 0.6677624820217793, 'f1score': 0.016175860638739114, 'precision': 0.011857707509881422, 'tpr': 0.025440313111545987}, 4), (19.931919382044768, 19.49119373776908, 0.5592743557243125, 0.025440313111545987, {'recall': 0.025440313111545987, 'fpr': 0.6677624820217793, 'f1score': 0.016175860638739114, 'precision': 0.011857707509881422, 'tpr': 0.025440313111545987}, 5), (19.931919382044768, 19.49119373776908, 0.5592743557243125, 0.8334956183057449, {'recall': 0.8334956183057449, 'fpr': 0.07534188397179988, 'f1score': 0.6180505415162455, 'precision': 0.4911072862880092, 'tpr': 0.8334956183057449}, 6), (19.931919382044768, 19.49119373776908, 0.5592743557243125, 0.8468292682926829, {'recall': 0.8468292682926829, 'fpr': 0.08602972399150743, 'f1score': 0.5973847212663455, 'precision': 0.4614566719829878, 'tpr': 0.8468292682926829}, 6)]
    gen = 6
    numgens = 20
    numalphas = 100
    myepsilon = 0.0001
    mylambda = 20
    final_payoff = 19.931919382044768

    
    results = {}

    rls[0][4]['payoff'] = rls[0][0]
    rls[0][4]['error'] = rls[0][1]
    rls[0][4]['norm'] = rls[0][2]
    results['training error on original training data and original testing data'] = rls[0][4]

    rls[1][4]['payoff'] = rls[1][0]
    rls[1][4]['error'] = rls[1][1]
    rls[1][4]['norm'] = rls[1][2]    
    results['testing error on original training data and original testing data'] = rls[1][4]

    rls[-2][4]['payoff'] = rls[-2][0]
    rls[-2][4]['error'] = rls[-2][1]
    rls[-2][4]['norm'] = rls[-2][2]    
    results['testing error on manipulated training data and manipulated testing data'] = rls[-2][4]

    rls[-1][4]['payoff'] = rls[-1][0]
    rls[-1][4]['error'] = rls[-1][1]
    rls[-1][4]['norm'] = rls[-1][2]    
    results['testing error on original training data and manipulated testing data'] = rls[-1][4]

    print(results)
    print('numgens',numgens)
    print('numalphas',numalphas)
    print('myepsilon',myepsilon)
    print('mylambda',mylambda)
    print('final_payoff',final_payoff)


 
#     l = [(1, 0, 1, 0.6558079725675097, {'recall': 0.9788867562380038, 'fpr': 0.1597440844927389, 'f1score': 0.6558079725675097, 'precision': 0.49307122139864645, 'tpr': 0.9788867562380038}, 0), (0, 0, 1, 0.6569626394953906, {'recall': 0.9849660523763336, 'fpr': 0.22784258148915296, 'f1score': 0.6569626394953906, 'precision': 0.49284154331472946, 'tpr': 0.9849660523763336}, 0), (1.3651282317376676, 0.6470588235294118, 0.28193059179174407, 0.6470588235294118, {'recall': 1.0, 'fpr': 0.14109347442680775, 'f1score': 0.6470588235294118, 'precision': 0.4782608695652174, 'tpr': 1.0}, 0), (1.3770177921928193, 0.6589483839845635, 0.28193059179174407, 0.6589483839845635, {'recall': 1.0, 'fpr': 0.13903638151425762, 'f1score': 0.6589483839845635, 'precision': 0.4913669064748201, 'tpr': 1.0}, 1), (1.3670707027532045, 0.6504312531709792, 0.2833605504177745, 0.6504312531709792, {'recall': 1.0, 'fpr': 0.13517755542475965, 'f1score': 0.6504312531709792, 'precision': 0.48195488721804514, 'tpr': 1.0}, 2), (1.334106515817929, 0.6475531389026199, 0.31344662308469085, 0.6475531389026199, {'recall': 1.0, 'fpr': 0.13974911799294396, 'f1score': 0.6475531389026199, 'precision': 0.4788011695906433, 'tpr': 1.0}, 3), (1.3367129605099304, 0.6523855890944499, 0.3156726285845195, 0.6523855890944499, {'recall': 1.0, 'fpr': 0.14013738959764474, 'f1score': 0.6523855890944499, 'precision': 0.4841040462427746, 'tpr': 1.0}, 4), (1.3295978726282573, 0.6608015640273704, 0.331203691399113, 0.6608015640273704, {'recall': 1.0, 'fpr': 0.136560409287682, 'f1score': 0.6608015640273704, 'precision': 0.49343065693430654, 'tpr': 1.0}, 5), (1.3165120446414962, 0.6477157360406092, 0.331203691399113, 0.6477157360406092, {'recall': 1.0, 'fpr': 0.1360517545579298, 'f1score': 0.6477157360406092, 'precision': 0.47897897897897895, 'tpr': 1.0}, 6), (1.3282022491949466, 0.6594059405940594, 0.331203691399113, 0.6594059405940594, {'recall': 1.0, 'fpr': 0.13532651455546812, 'f1score': 0.6594059405940594, 'precision': 0.4918759231905465, 'tpr': 1.0}, 7), (1.3164966405117453, 0.6477003319108582, 0.331203691399113, 0.6477003319108582, {'recall': 1.0, 'fpr': 0.14560062708210855, 'f1score': 0.6477003319108582, 'precision': 0.4789621318373071, 'tpr': 1.0}, 8), (1.323519509394276, 0.656641604010025, 0.33312209461574915, 0.656641604010025, {'recall': 1.0, 'fpr': 0.13463050314465408, 'f1score': 0.656641604010025, 'precision': 0.48880597014925375, 'tpr': 1.0}, 9), (0, 0.656641604010025, 1.6566416040100251, 0.6645489199491741, {'recall': 0.9840075258701787, 'fpr': 0.22742694538688848, 'f1score': 0.6645489199491741, 'precision': 0.5016786570743406, 'tpr': 0.9840075258701787}, 10), (0, 0.656641604010025, 1.6566416040100251, 0.6633472534532605, {'recall': 0.9833333333333333, 'fpr': 0.22549234135667395, 'f1score': 0.6633472534532605, 'precision': 0.5004847309743092, 'tpr': 0.9833333333333333}, 10)]
#     numgens = 10
#     numalphas = 10
#     myepsilon = 0.0001
#     mylambda = 1

    
def ttest():
    records = []
    record = {'testing error on original training data and original testing data': {'recall': 0.8410206084396468, 'error': 0, 'precision': 0.49394812680115274, 'tpr': 0.8410206084396468, 'fpr': 0.07452678040913335, 'f1score': 0.6223674655047204, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8500486854917235, 'error': 0.5251798561151079, 'precision': 0.4980034227039361, 'tpr': 0.8500486854917235, 'fpr': 0.07474730315127835, 'f1score': 0.6280575539568345, 'norm': 1.5251798561151078, 'payoff': 0}, 'training error on original training data and original testing data': {'recall': 0.5127952755905512, 'error': 0, 'precision': 0.48935504070131497, 'tpr': 0.5127952755905512, 'fpr': 0.16724774405250206, 'f1score': 0.5008010253123999, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8516377649325626, 'error': 0.5251798561151079, 'precision': 0.5042783799201369, 'tpr': 0.8516377649325626, 'fpr': 0.07388199285835742, 'f1score': 0.6334647079899678, 'norm': 1.5251798561151078, 'payoff': 0}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8458536585365853, 'error': 0, 'precision': 0.49798966111430215, 'tpr': 0.8458536585365853, 'fpr': 0.07422505307855626, 'f1score': 0.6268980477223427, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8504950495049505, 'error': 0.5228758169934641, 'precision': 0.4891799544419134, 'tpr': 0.8504950495049505, 'fpr': 0.07608142493638677, 'f1score': 0.6211135213304411, 'norm': 1.522875816993464, 'payoff': 0}, 'training error on original training data and original testing data': {'recall': 0.5135842880523731, 'error': 0, 'precision': 0.49154135338345867, 'tpr': 0.5135842880523731, 'fpr': 0.16654694715238583, 'f1score': 0.5023211141347848, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8533724340175953, 'error': 0.5228758169934641, 'precision': 0.496304718590108, 'tpr': 0.8533724340175953, 'fpr': 0.07523138320455125, 'f1score': 0.6276060388209921, 'norm': 1.522875816993464, 'payoff': 0}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8481012658227848, 'error': 0, 'precision': 0.4994266055045872, 'tpr': 0.8481012658227848, 'fpr': 0.07415272233075682, 'f1score': 0.6286539155539517, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8475247524752475, 'error': 0.05024082993701371, 'precision': 0.4885844748858447, 'tpr': 0.8475247524752475, 'fpr': 0.07599660729431722, 'f1score': 0.6198406951484432, 'norm': 1.0502408299370136, 'payoff': 0}, 'training error on original training data and original testing data': {'recall': 0.5238558909444986, 'error': 0, 'precision': 0.4996904024767802, 'tpr': 0.5238558909444986, 'fpr': 0.1662722502315053, 'f1score': 0.5114878783077167, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.860078277886497, 'error': 0.05024082993701371, 'precision': 0.4957698815566836, 'tpr': 0.860078277886497, 'fpr': 0.07590422822210902, 'f1score': 0.6289803220035778, 'norm': 1.0502408299370136, 'payoff': 0}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8504854368932039, 'error': 0, 'precision': 0.4997147746719909, 'tpr': 0.8504854368932039, 'fpr': 0.07451146983857264, 'f1score': 0.6295364714337046, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8414872798434442, 'error': 0.5305826999638075, 'precision': 0.49596309111880044, 'tpr': 0.8414872798434442, 'fpr': 0.07420614705382918, 'f1score': 0.6240928882438317, 'norm': 1.5305826999638075, 'payoff': 0}, 'training error on original training data and original testing data': {'recall': 0.5158781594296824, 'error': 0, 'precision': 0.500943989930774, 'tpr': 0.5158781594296824, 'fpr': 0.16326950792670372, 'f1score': 0.508301404853129, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8553519768563163, 'error': 0.5305826999638075, 'precision': 0.5048377916903813, 'tpr': 0.8553519768563163, 'fpr': 0.07396072430502423, 'f1score': 0.6349319971367215, 'norm': 1.5305826999638075, 'payoff': 0}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8013500482160077, 'error': 0, 'precision': 0.35182049110922947, 'tpr': 0.8013500482160077, 'fpr': 0.13015387231148517, 'f1score': 0.4889673433362754, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8488714425907753, 'error': 2.6067961165048543, 'precision': 0.46380697050938335, 'tpr': 0.8488714425907753, 'fpr': 0.08488243782361429, 'f1score': 0.5998613037447988, 'norm': 0.24321273478208738, 'payoff': 3.363583381722767}, 'training error on original training data and original testing data': {'recall': 0.5856910569105691, 'error': 0, 'precision': 0.5084697910784868, 'tpr': 0.5856910569105691, 'fpr': 0.17902313624678665, 'f1score': 0.5443554480882575, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8250728862973761, 'error': 2.6067961165048543, 'precision': 0.2568835098335855, 'tpr': 0.8250728862973761, 'fpr': 0.2086483731203806, 'f1score': 0.39178587909552376, 'norm': 0.24321273478208738, 'payoff': 3.363583381722767}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8079601990049752, 'error': 0, 'precision': 0.342327150084317, 'tpr': 0.8079601990049752, 'fpr': 0.13225943196269604, 'f1score': 0.4809002072845721, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8449612403100775, 'error': 5.349740932642487, 'precision': 0.4890633763320247, 'tpr': 0.8449612403100775, 'fpr': 0.07741332426920462, 'f1score': 0.6195381882770871, 'norm': 0.22248840042438456, 'payoff': 6.127252532218103}, 'training error on original training data and original testing data': {'recall': 0.6054776654711445, 'error': 0, 'precision': 0.5101648351648351, 'tpr': 0.6054776654711445, 'fpr': 0.18319120517825954, 'f1score': 0.5537498136275533, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.831041257367387, 'error': 5.349740932642487, 'precision': 0.391304347826087, 'tpr': 0.831041257367387, 'fpr': 0.1116958071634697, 'f1score': 0.5320754716981132, 'norm': 0.22248840042438456, 'payoff': 6.127252532218103}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.7967244701348748, 'error': 0, 'precision': 0.37051971326164873, 'tpr': 0.7967244701348748, 'fpr': 0.11945247406903588, 'f1score': 0.5058103975535169, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8099415204678363, 'error': 0.3583955829814875, 'precision': 0.3064159292035398, 'tpr': 0.8099415204678363, 'fpr': 0.1597587905554612, 'f1score': 0.4446227929373997, 'norm': 0.4271933729827174, 'payoff': 0.9312022099987701}, 'training error on original training data and original testing data': {'recall': 0.6004507405022537, 'error': 0, 'precision': 0.5210952780106175, 'tpr': 0.6004507405022537, 'fpr': 0.176810398184444, 'f1score': 0.5579655946148093, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7902439024390244, 'error': 0.3583955829814875, 'precision': 0.19814090019569472, 'tpr': 0.7902439024390244, 'fpr': 0.2783864118895966, 'f1score': 0.3168394289067084, 'norm': 0.4271933729827174, 'payoff': 0.9312022099987701}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8170254403131115, 'error': 0, 'precision': 0.3417928776094965, 'tpr': 0.8170254403131115, 'fpr': 0.13652572592969944, 'f1score': 0.481962481962482, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8568646543330087, 'error': 9.246018849528761, 'precision': 0.497456189937818, 'tpr': 0.8568646543330087, 'fpr': 0.07551176420623461, 'f1score': 0.6294706723891274, 'norm': 0.3156680454511367, 'payoff': 9.930350804077625}, 'training error on original training data and original testing data': {'recall': 0.6026597469996756, 'error': 0, 'precision': 0.519284516489659, 'tpr': 0.6026597469996756, 'fpr': 0.17700936503035916, 'f1score': 0.5578741930641045, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7, 'error': 9.246018849528761, 'precision': 0.14621780571892112, 'tpr': 0.7, 'fpr': 0.3576890399320306, 'f1score': 0.24190572051669182, 'norm': 0.3156680454511367, 'payoff': 9.930350804077625}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8154296875, 'error': 0, 'precision': 0.3424938474159147, 'tpr': 0.8154296875, 'fpr': 0.13612432065217392, 'f1score': 0.4823801270941652, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8218780251694094, 'error': 9.174725983236621, 'precision': 0.4873708381171068, 'tpr': 0.8218780251694094, 'fpr': 0.0758902014107249, 'f1score': 0.6118918918918919, 'norm': 0.6399918170285073, 'payoff': 9.534734166208114}, 'training error on original training data and original testing data': {'recall': 0.5755418958265933, 'error': 0, 'precision': 0.5120898100172712, 'tpr': 0.5755418958265933, 'fpr': 0.17458028633226902, 'f1score': 0.541964965727342, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.6702439024390244, 'error': 9.174725983236621, 'precision': 0.12582417582417582, 'tpr': 0.6702439024390244, 'fpr': 0.40535031847133757, 'f1score': 0.21187355435620664, 'norm': 0.6399918170285073, 'payoff': 9.534734166208114}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8338164251207729, 'error': 0, 'precision': 0.36848847139197266, 'tpr': 0.8338164251207729, 'fpr': 0.12571185720356992, 'f1score': 0.5111045306485046, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8431752178121975, 'error': 0.05471391417425228, 'precision': 0.4985689753863766, 'tpr': 0.8431752178121975, 'fpr': 0.0744454831307895, 'f1score': 0.6266187050359712, 'norm': 0.3238329340992916, 'payoff': 0.7308809800749607}, 'training error on original training data and original testing data': {'recall': 0.5896272285251215, 'error': 0, 'precision': 0.5132618510158014, 'tpr': 0.5896272285251215, 'fpr': 0.17756047349459597, 'f1score': 0.5488007240911148, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7253176930596286, 'error': 0.05471391417425228, 'precision': 0.1793570219966159, 'tpr': 0.7253176930596286, 'fpr': 0.28827375392714616, 'f1score': 0.2875968992248062, 'norm': 0.3238329340992916, 'payoff': 0.7308809800749607}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8114511352418559, 'error': 0, 'precision': 0.363395225464191, 'tpr': 0.8114511352418559, 'fpr': 0.12216849071010435, 'f1score': 0.5019847328244275, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8352941176470589, 'error': 0.0051666666666666675, 'precision': 0.4824462061155153, 'tpr': 0.8352941176470589, 'fpr': 0.07758913412563667, 'f1score': 0.6116295764536971, 'norm': 0.23822431446430148, 'payoff': 0.7669423522023653}, 'training error on original training data and original testing data': {'recall': 0.5717085919634106, 'error': 0, 'precision': 0.5147058823529411, 'tpr': 0.5717085919634106, 'fpr': 0.16942191190060582, 'f1score': 0.5417118093174431, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7196896217264791, 'error': 0.0051666666666666675, 'precision': 0.16707948660211663, 'tpr': 0.7196896217264791, 'fpr': 0.31430028039765484, 'f1score': 0.2711988304093567, 'norm': 0.23822431446430148, 'payoff': 0.7669423522023653}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8250244379276638, 'error': 0, 'precision': 0.34128588758592804, 'tpr': 0.8250244379276638, 'fpr': 0.138320455124395, 'f1score': 0.482837528604119, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8571428571428571, 'error': 4.292437520285621, 'precision': 0.4437596302003082, 'tpr': 0.8571428571428571, 'fpr': 0.09184192672998644, 'f1score': 0.584771573604061, 'norm': 0.6505834171570459, 'payoff': 4.641854103128575}, 'training error on original training data and original testing data': {'recall': 0.5887758450935346, 'error': 0, 'precision': 0.5079275198187996, 'tpr': 0.5887758450935346, 'fpr': 0.17820157900133293, 'f1score': 0.5453716370269038, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7409579667644184, 'error': 4.292437520285621, 'precision': 0.1947584789311408, 'tpr': 0.7409579667644184, 'fpr': 0.26611191305086185, 'f1score': 0.30844354018311293, 'norm': 0.6505834171570459, 'payoff': 4.641854103128575}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.810126582278481, 'error': 0, 'precision': 0.35374149659863946, 'tpr': 0.810126582278481, 'fpr': 0.12910897817038988, 'f1score': 0.49245338857650195, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.842, 'error': 0.10628238341968912, 'precision': 0.46416758544652703, 'tpr': 0.842, 'fpr': 0.08237288135593221, 'f1score': 0.5984363894811656, 'norm': 0.23983366015721397, 'payoff': 0.8664487232624751}, 'training error on original training data and original testing data': {'recall': 0.592156862745098, 'error': 0, 'precision': 0.5099915564311849, 'tpr': 0.592156862745098, 'fpr': 0.17874743326488707, 'f1score': 0.5480114925147437, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7771260997067448, 'error': 0.10628238341968912, 'precision': 0.19073896353166986, 'tpr': 0.7771260997067448, 'fpr': 0.2864057060371911, 'f1score': 0.3062993642843383, 'norm': 0.23983366015721397, 'payoff': 0.8664487232624751}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8017664376840039, 'error': 0, 'precision': 0.3435660218671152, 'tpr': 0.8017664376840039, 'fpr': 0.1325014854426619, 'f1score': 0.4810126582278481, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8435972629521017, 'error': 11.06562703053931, 'precision': 0.4728767123287671, 'tpr': 0.8435972629521017, 'fpr': 0.0816846395516685, 'f1score': 0.6060393258426966, 'norm': 0.28957343623745757, 'payoff': 11.776053594301853}, 'training error on original training data and original testing data': {'recall': 0.590715920235371, 'error': 0, 'precision': 0.5054545454545455, 'tpr': 0.590715920235371, 'fpr': 0.18150087260034903, 'f1score': 0.5447693699125716, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8490749756572541, 'error': 11.06562703053931, 'precision': 0.2756876383180525, 'tpr': 0.8490749756572541, 'fpr': 0.1945978085449758, 'f1score': 0.4162291169451074, 'norm': 0.28957343623745757, 'payoff': 11.776053594301853}}
    records.append(record)
    
    # Following are results for experiment when error is 1-recall
    
    record = {'testing error on original training data and original testing data': {'recall': 0.8166828322017459, 'error': 0, 'precision': 0.350541215653622, 'tpr': 0.8166828322017459, 'fpr': 0.1325516186591894, 'f1score': 0.4905330614622779, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8462291870714985, 'error': 0.632952691680261, 'precision': 0.48268156424581005, 'tpr': 0.8462291870714985, 'fpr': 0.07861448340266576, 'f1score': 0.6147278548559232, 'norm': 0.3522083554977504, 'payoff': 1.2807443361825106}, 'training error on original training data and original testing data': {'recall': 0.586105675146771, 'error': 0, 'precision': 0.5096426545660806, 'tpr': 0.586105675146771, 'fpr': 0.1776248202177933, 'f1score': 0.5452063106796117, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7064579256360078, 'error': 0.632952691680261, 'precision': 0.19125827814569538, 'tpr': 0.7064579256360078, 'fpr': 0.25921209033791814, 'f1score': 0.30102147175317906, 'norm': 0.3522083554977504, 'payoff': 1.2807443361825106}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8305905130687319, 'error': 0, 'precision': 0.4022503516174402, 'tpr': 0.8305905130687319, 'fpr': 0.10835387099515595, 'f1score': 0.542008843967151, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8493150684931506, 'error': 8.121349772874757, 'precision': 0.496, 'tpr': 0.8493150684931506, 'fpr': 0.0748853795211411, 'f1score': 0.6262626262626263, 'norm': 0.6814581846842014, 'payoff': 8.439891588190555}, 'training error on original training data and original testing data': {'recall': 0.5706840390879478, 'error': 0, 'precision': 0.5028702640642939, 'tpr': 0.5706840390879478, 'fpr': 0.17800616649537512, 'f1score': 0.5346353371986573, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.6804619826756496, 'error': 8.121349772874757, 'precision': 0.13725490196078433, 'tpr': 0.6804619826756496, 'fpr': 0.37785902559306184, 'f1score': 0.2284329563812601, 'norm': 0.6814581846842014, 'payoff': 8.439891588190555}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8299516908212561, 'error': 0, 'precision': 0.35657949356579494, 'tpr': 0.8299516908212561, 'fpr': 0.1317467063323417, 'f1score': 0.4988385598141696, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8468292682926829, 'error': 19.49119373776908, 'precision': 0.4614566719829878, 'tpr': 0.8468292682926829, 'fpr': 0.08602972399150743, 'f1score': 0.5973847212663455, 'norm': 0.5592743557243125, 'payoff': 19.931919382044768}, 'training error on original training data and original testing data': {'recall': 0.6, 'error': 0, 'precision': 0.5175611126720989, 'tpr': 0.6, 'fpr': 0.176464542651593, 'f1score': 0.5557399306079348, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8334956183057449, 'error': 19.49119373776908, 'precision': 0.4911072862880092, 'tpr': 0.8334956183057449, 'fpr': 0.07534188397179988, 'f1score': 0.6180505415162455, 'norm': 0.5592743557243125, 'payoff': 19.931919382044768}}
    records.append(record)

    
    
    
    l1 = []
    l2 = []
    l3 = []
    
    for record in records:
        l1.append(record['testing error on original training data and original testing data']['precision'])
        l2.append(record['testing error on original training data and manipulated testing data']['precision'])
        l3.append(record['testing error on manipulated training data and manipulated testing data']['precision'])
#         l.append(record['training error on original training data and original testing data']['precision'])
        

    ttest=stats.ttest_ind(l1,l2,equal_var=True)
    print 't-statistic independent = %6.3f pvalue = %6.4f on manipulated testing' % ttest
#     ttest=stats.ttest_rel(l1,l2)
#     print 't-statistic dependent = %6.3f pvalue = %6.4f' % ttest
    
    ttest=stats.ttest_ind(l1,l3,equal_var=True)
    print 't-statistic independent = %6.3f pvalue = %6.4f on manipulated training and manipulated testing' % ttest

    ttest=stats.ttest_ind(l2,l3,equal_var=True)
    print 't-statistic independent = %6.3f pvalue = %6.4f on manipulated testing and manipulated training/testing' % ttest

    a = np.array([l1,l2,l3])
    friedmantest = stats.friedmanchisquare(*(a[i, :] for i in range(a.shape[0])))
    print 'friedmantest-statistic = %6.3f pvalue = %6.4f' % friedmantest

    print('l1',l1)
    print('l2',l2)
    print('l3',l3)

    print('len(l1)',len(l1))
    print('len(l2)',len(l2))
    print('len(l3)',len(l3))
    print 'Need to have length of l to be 20'
    

    
if __name__ == '__main__':
    
#     InDir = '/home/aneesh/Documents/AdversarialLearningDatasets/Caltech101/'
#     partitoner(InDir)
#    resizer('/home/aneesh/Documents/AdversarialLearningDatasets/Caltech101/101_ObjectCategories_Train/crocodile/')
#    resizer('/home/aneesh/Documents/AdversarialLearningDatasets/Caltech101/101_ObjectCategories_Train/crocodile_head/')

#    resizer('/home/aneesh/Documents/AdversarialLearningDatasets/Caltech101/101_ObjectCategories_Test/crocodile/')
#    resizer('/home/aneesh/Documents/AdversarialLearningDatasets/Caltech101/101_ObjectCategories_Test/crocodile_head/')
        

    InDir = '/home/aneesh/Documents/AdversarialLearningDatasets/ILSVRC2010/' 
    GameInDir = '/home/aneesh/Documents/AdversarialLearningDatasets/ILSVRC2010/cifar10_data/imagenet2010-batches-bin/'

#     partitoner(InDir)
   
#     resizer(InDir+'TrainSplit/BrownDog/')
#     resizer(InDir+'TrainSplit/BlackDog/')
#   
#     resizer(InDir+'TestSplit/BrownDog/')
#     resizer(InDir+'TestSplit/BlackDog/')

#     resizer(InDir+'TrainSplit/SmallCat/')
#     resizer(InDir+'TestSplit/SmallCat/')

#     binarizer(InDir,'TrainSplit/','train.bin')
#     copyfile(InDir + 'train.bin', GameInDir + 'train.bin')
# #      
#     binarizer(InDir,'TestSplit/','test.bin')
#     copyfile(InDir + 'test.bin', GameInDir + 'test.bin')    generatereports()
    generatereports()
    
#     ttest()
