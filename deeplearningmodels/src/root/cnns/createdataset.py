from PIL import Image
import io
import math
from matplotlib.pyplot import plot, title, xlabel, ylabel, savefig, legend
import numpy
from os import listdir
import os
from scipy import stats
from shutil import copyfile
import sys

import matplotlib.pyplot as plt
import numpy as np
from matplotlib import cm


# import cv2
# width = 32
# height = 32
width = 1024
height = 1024
length = 3073

# width = 224
# height = 224

#width = 300
#height = 100

# perfmetric = "precision"
# perfmetric = "recall"
# perfmetric = "f1score"
# perfmetric = "tpr"
perfmetric = "fpr"
executeonserver = False



def partitoner(Dir):
    os.chdir(Dir)
    
    InDir = Dir + 'LabelledData/'
    classdirs = ['BrownDog/','BlackDog/']

    TrainOutDir = Dir + 'TrainSplit/'
    TestOutDir = Dir + 'TestSplit/'

    for dir in classdirs:
        files = listdir(InDir + dir)
        
        splitind = int(math.floor(0.8*len(files)))
        trainfiles = files[0:splitind]
        testfiles = files[splitind:]
    
        for file in trainfiles:
            copyfile(InDir+dir+file, TrainOutDir+dir+file)

        for file in testfiles:
            copyfile(InDir+dir+file, TestOutDir+dir+file)


def resizer(CurrDir):
    os.chdir(CurrDir)
    for f in listdir(CurrDir):
        
        img = Image.open(f)
        print(img.size)
        image = img.resize((width,height), Image.ANTIALIAS)
        image.save(CurrDir + f)
        print(img.size)
        
        
# def colourtograyscale(InDir,OutDir):
#     os.chdir(InDir)
#     for f in listdir(InDir):
#         img = Image.open(f)
#         # http://stackoverflow.com/questions/12201577/how-can-i-convert-an-rgb-image-into-grayscale-in-python
#         # http://stackoverflow.com/questions/9506841/using-python-pil-to-turn-a-rgb-image-into-a-pure-black-and-white-image
        


def binarizer(CurrDir,ValDir,OutFile): 
    # resizer and binarizer have same directory
    # Pixel value is in the form (R,G,B) where R,G,B belongs in the range 0,255
    ind = 0
    L = []
    os.chdir(CurrDir)
    binfile = open(OutFile, 'wb')
    os.chdir(CurrDir + ValDir)
    ls = listdir(CurrDir + ValDir)
    ls.sort()
    for d in ls:
        os.chdir(CurrDir + ValDir + d)
        for f in listdir(CurrDir + ValDir + d):
            if not executeonserver:
                img = Image.open(f)
                l = numpy.insert(numpy.array(img.getdata()).flatten(order='F'),0, ind)
            else:
                img = cv2.imread(f)
                l = numpy.insert(numpy.array(img).flatten(order='F'),0, ind)
            if(len(l) == length):
                L.append(l)
        ind = ind + 1
    
    print(len(L)*length)
    print(len(numpy.concatenate(L)))
    
    numpy.concatenate(L).astype('int16').tofile(binfile)
#     file.write(numpy.concatenate(L).astype('int16'))
    binfile.close()
    
    
def generatereports():
#     rls = [(1, 0, 1, 0.5008010253123999, {'recall': 0.5127952755905512, 'fpr': 0.16724774405250206, 'f1score': 0.5008010253123999, 'precision': 0.48935504070131497, 'tpr': 0.5127952755905512}, 0), (0, 0, 1, 0.6223674655047204, {'recall': 0.8410206084396468, 'fpr': 0.07452678040913335, 'f1score': 0.6223674655047204, 'precision': 0.49394812680115274, 'tpr': 0.8410206084396468}, 0), (1.261150870056856, 0.5171407731582787, 0.25598990310142256, 0.5171407731582787, {'recall': 0.5283159463487332, 'fpr': 0.13661526294978252, 'f1score': 0.5171407731582787, 'precision': 0.5064285714285715, 'tpr': 0.5283159463487332}, 0), (1.2981137407009944, 0.5251798561151079, 0.22706611541411337, 0.5251798561151079, {'recall': 0.5423476968796433, 'fpr': 0.13929560743965175, 'f1score': 0.5251798561151079, 'precision': 0.5090655509065551, 'tpr': 0.5423476968796433}, 1), (1.2981137407009944, 0.5251798561151079, 0.22706611541411337, 0.5251798561151079, {'recall': 0.5423476968796433, 'fpr': 0.13929560743965175, 'f1score': 0.5251798561151079, 'precision': 0.5090655509065551, 'tpr': 0.5423476968796433}, 2), (0, 0.5251798561151079, 1.5251798561151078, 0.6334647079899678, {'recall': 0.8516377649325626, 'fpr': 0.07388199285835742, 'f1score': 0.6334647079899678, 'precision': 0.5042783799201369, 'tpr': 0.8516377649325626}, 3), (0, 0.5251798561151079, 1.5251798561151078, 0.6280575539568345, {'recall': 0.8500486854917235, 'fpr': 0.07474730315127835, 'f1score': 0.6280575539568345, 'precision': 0.4980034227039361, 'tpr': 0.8500486854917235}, 3)]
#     gen = 3
#     numgens = 10
#     numalphas = 20
#     myepsilon = 0.001
#     mylambda = 1
#     final_payoff = 1.2981137407009944

#     rls = [(1, 0, 1, 0.5023211141347848, {'recall': 0.5135842880523731, 'fpr': 0.16654694715238583, 'f1score': 0.5023211141347848, 'precision': 0.49154135338345867, 'tpr': 0.5135842880523731}, 0), (0, 0, 1, 0.6268980477223427, {'recall': 0.8458536585365853, 'fpr': 0.07422505307855626, 'f1score': 0.6268980477223427, 'precision': 0.49798966111430215, 'tpr': 0.8458536585365853}, 0), (1.2612787655263276, 0.5346112886048988, 0.27333252307857125, 0.5346112886048988, {'recall': 0.555719557195572, 'fpr': 0.14053518334985135, 'f1score': 0.5346112886048988, 'precision': 0.5150478796169631, 'tpr': 0.555719557195572}, 0), (1.2548944738611418, 0.5183836912995996, 0.26348921743845777, 0.5183836912995996, {'recall': 0.530156366344006, 'fpr': 0.1368400237294839, 'f1score': 0.5183836912995996, 'precision': 0.5071225071225072, 'tpr': 0.530156366344006}, 1), (1.213784390606654, 0.5161290322580645, 0.3023446416514104, 0.5161290322580645, {'recall': 0.5230312035661219, 'fpr': 0.13415116739216462, 'f1score': 0.5161290322580645, 'precision': 0.5094066570188133, 'tpr': 0.5230312035661219}, 2), (1.1541369357660634, 0.5228758169934641, 0.3687388812274006, 0.5228758169934641, {'recall': 0.5325443786982249, 'fpr': 0.13510301109350237, 'f1score': 0.5228758169934641, 'precision': 0.5135520684736091, 'tpr': 0.5325443786982249}, 3), (1.1541369357660634, 0.5228758169934641, 0.3687388812274006, 0.5228758169934641, {'recall': 0.5325443786982249, 'fpr': 0.13510301109350237, 'f1score': 0.5228758169934641, 'precision': 0.5135520684736091, 'tpr': 0.5325443786982249}, 4), (0, 0.5228758169934641, 1.522875816993464, 0.6276060388209921, {'recall': 0.8533724340175953, 'fpr': 0.07523138320455125, 'f1score': 0.6276060388209921, 'precision': 0.496304718590108, 'tpr': 0.8533724340175953}, 5), (0, 0.5228758169934641, 1.522875816993464, 0.6211135213304411, {'recall': 0.8504950495049505, 'fpr': 0.07608142493638677, 'f1score': 0.6211135213304411, 'precision': 0.4891799544419134, 'tpr': 0.8504950495049505}, 5)]
#     gen = 5
#     numgens = 10
#     numalphas = 20
#     myepsilon = 0.0001
#     mylambda = 1
#     final_payoff = 1.1541369357660634
 
#     rls = [(1, 0, 1, 0.5114878783077167, {'recall': 0.5238558909444986, 'fpr': 0.1662722502315053, 'f1score': 0.5114878783077167, 'precision': 0.4996904024767802, 'tpr': 0.5238558909444986}, 0), (0, 0, 1, 0.6286539155539517, {'recall': 0.8481012658227848, 'fpr': 0.07415272233075682, 'f1score': 0.6286539155539517, 'precision': 0.4994266055045872, 'tpr': 0.8481012658227848}, 0), (0.7453612461976168, 0.05208863058481657, 0.3067273843871997, 0.5208863058481656, {'recall': 0.532293986636971, 'fpr': 0.1363546408074411, 'f1score': 0.5208863058481656, 'precision': 0.5099573257467994, 'tpr': 0.532293986636971}, 0), (0.7379801618702354, 0.05373665480427047, 0.31575649293403496, 0.5373665480427047, {'recall': 0.5527086383601757, 'fpr': 0.13686928883591576, 'f1score': 0.5373665480427047, 'precision': 0.5228531855955678, 'tpr': 0.5527086383601757}, 1), (0.6984292027158623, 0.05024082993701371, 0.35181162722115134, 0.5024082993701371, {'recall': 0.5124716553287982, 'fpr': 0.13748276541264526, 'f1score': 0.5024082993701371, 'precision': 0.49273255813953487, 'tpr': 0.5124716553287982}, 2), (0.6984292027158623, 0.05024082993701371, 0.35181162722115134, 0.5024082993701371, {'recall': 0.5124716553287982, 'fpr': 0.13748276541264526, 'f1score': 0.5024082993701371, 'precision': 0.49273255813953487, 'tpr': 0.5124716553287982}, 3), (0, 0.05024082993701371, 1.0502408299370136, 0.6289803220035778, {'recall': 0.860078277886497, 'fpr': 0.07590422822210902, 'f1score': 0.6289803220035778, 'precision': 0.4957698815566836, 'tpr': 0.860078277886497}, 4), (0, 0.05024082993701371, 1.0502408299370136, 0.6198406951484432, {'recall': 0.8475247524752475, 'fpr': 0.07599660729431722, 'f1score': 0.6198406951484432, 'precision': 0.4885844748858447, 'tpr': 0.8475247524752475}, 4)]
#     gen = 4
#     numgens = 10
#     numalphas = 20
#     myepsilon = 0.0001
#     mylambda = 0.1
#     final_payoff = 0.6984292027158623
 
#     rls = [(1, 0, 1, 0.508301404853129, {'recall': 0.5158781594296824, 'fpr': 0.16326950792670372, 'f1score': 0.508301404853129, 'precision': 0.500943989930774, 'tpr': 0.5158781594296824}, 0), (0, 0, 1, 0.6295364714337046, {'recall': 0.8504854368932039, 'fpr': 0.07451146983857264, 'f1score': 0.6295364714337046, 'precision': 0.4997147746719909, 'tpr': 0.8504854368932039}, 0), (1.3159476296722432, 0.5241528478731075, 0.20820521820086424, 0.5241528478731075, {'recall': 0.5401188707280832, 'fpr': 0.13870201820340325, 'f1score': 0.5241528478731075, 'precision': 0.5091036414565826, 'tpr': 0.5401188707280832}, 0), (1.27991153365847, 0.5305826999638075, 0.25067116630533737, 0.5305826999638075, {'recall': 0.535427319211103, 'fpr': 0.1313854104551779, 'f1score': 0.5305826999638075, 'precision': 0.5258249641319943, 'tpr': 0.535427319211103}, 1), (1.27991153365847, 0.5305826999638075, 0.25067116630533737, 0.5305826999638075, {'recall': 0.535427319211103, 'fpr': 0.1313854104551779, 'f1score': 0.5305826999638075, 'precision': 0.5258249641319943, 'tpr': 0.535427319211103}, 2), (0, 0.5305826999638075, 1.5305826999638075, 0.6349319971367215, {'recall': 0.8553519768563163, 'fpr': 0.07396072430502423, 'f1score': 0.6349319971367215, 'precision': 0.5048377916903813, 'tpr': 0.8553519768563163}, 3), (0, 0.5305826999638075, 1.5305826999638075, 0.6240928882438317, {'recall': 0.8414872798434442, 'fpr': 0.07420614705382918, 'f1score': 0.6240928882438317, 'precision': 0.49596309111880044, 'tpr': 0.8414872798434442}, 3)]
#     gen = 3
#     numgens = 20
#     numalphas = 100
#     myepsilon = 0.0001
#     mylambda = 1
#     final_payoff = 1.27991153365847


#     rls = [(1, 0, 1, 0.5856910569105691, {'recall': 0.5856910569105691, 'fpr': 0.17902313624678665, 'f1score': 0.5443554480882575, 'precision': 0.5084697910784868, 'tpr': 0.5856910569105691}, 0), (0, 0, 1, 0.8013500482160077, {'recall': 0.8013500482160077, 'fpr': 0.13015387231148517, 'f1score': 0.4889673433362754, 'precision': 0.35182049110922947, 'tpr': 0.8013500482160077}, 0), (3.363583381722767, 2.6067961165048543, 0.24321273478208738, 0.5213592233009708, {'recall': 0.5213592233009708, 'fpr': 0.16498455200823892, 'f1score': 0.5111851499286054, 'precision': 0.5014005602240896, 'tpr': 0.5213592233009708}, 0), (3.363583381722767, 2.6067961165048543, 0.24321273478208738, 0.5213592233009708, {'recall': 0.5213592233009708, 'fpr': 0.16498455200823892, 'f1score': 0.5111851499286054, 'precision': 0.5014005602240896, 'tpr': 0.5213592233009708}, 1), (3.363583381722767, 2.6067961165048543, 0.24321273478208738, 0.8250728862973761, {'recall': 0.8250728862973761, 'fpr': 0.2086483731203806, 'f1score': 0.39178587909552376, 'precision': 0.2568835098335855, 'tpr': 0.8250728862973761}, 2), (3.363583381722767, 2.6067961165048543, 0.24321273478208738, 0.8488714425907753, {'recall': 0.8488714425907753, 'fpr': 0.08488243782361429, 'f1score': 0.5998613037447988, 'precision': 0.46380697050938335, 'tpr': 0.8488714425907753}, 2)]
#     gen = 2
#     numgens = 20
#     numalphas = 20
#     myepsilon = 0.0001
#     mylambda = 5
#     final_payoff = 3.363583381722767

#     rls = [(1, 0, 1, 0.6054776654711445, {'recall': 0.6054776654711445, 'fpr': 0.18319120517825954, 'f1score': 0.5537498136275533, 'precision': 0.5101648351648351, 'tpr': 0.6054776654711445}, 0), (0, 0, 1, 0.8079601990049752, {'recall': 0.8079601990049752, 'fpr': 0.13225943196269604, 'f1score': 0.4809002072845721, 'precision': 0.342327150084317, 'tpr': 0.8079601990049752}, 0), (6.127252532218103, 5.349740932642487, 0.22248840042438456, 0.5349740932642487, {'recall': 0.5349740932642487, 'fpr': 0.16989291598023065, 'f1score': 0.5170579029733959, 'precision': 0.5003028467595396, 'tpr': 0.5349740932642487}, 0), (6.127252532218103, 5.349740932642487, 0.22248840042438456, 0.5349740932642487, {'recall': 0.5349740932642487, 'fpr': 0.16989291598023065, 'f1score': 0.5170579029733959, 'precision': 0.5003028467595396, 'tpr': 0.5349740932642487}, 1), (6.127252532218103, 5.349740932642487, 0.22248840042438456, 0.831041257367387, {'recall': 0.831041257367387, 'fpr': 0.1116958071634697, 'f1score': 0.5320754716981132, 'precision': 0.391304347826087, 'tpr': 0.831041257367387}, 2), (6.127252532218103, 5.349740932642487, 0.22248840042438456, 0.8449612403100775, {'recall': 0.8449612403100775, 'fpr': 0.07741332426920462, 'f1score': 0.6195381882770871, 'precision': 0.4890633763320247, 'tpr': 0.8449612403100775}, 2)]
#     gen = 2
#     numgens = 20
#     numalphas = 20
#     myepsilon = 0.0001
#     mylambda = 10
#     final_payoff = 6.127252532218103
 
#     rls = [(1, 0, 1, 0.6004507405022537, {'recall': 0.6004507405022537, 'fpr': 0.176810398184444, 'f1score': 0.5579655946148093, 'precision': 0.5210952780106175, 'tpr': 0.6004507405022537}, 0), (0, 0, 1, 0.7967244701348748, {'recall': 0.7967244701348748, 'fpr': 0.11945247406903588, 'f1score': 0.5058103975535169, 'precision': 0.37051971326164873, 'tpr': 0.7967244701348748}, 0), (0.9312022099987701, 0.3583955829814875, 0.4271933729827174, 0.716791165962975, {'recall': 0.716791165962975, 'fpr': 0.22065631107910708, 'f1score': 0.5939981160005383, 'precision': 0.5071231617647058, 'tpr': 0.716791165962975}, 0), (0.9312022099987701, 0.3583955829814875, 0.4271933729827174, 0.716791165962975, {'recall': 0.716791165962975, 'fpr': 0.22065631107910708, 'f1score': 0.5939981160005383, 'precision': 0.5071231617647058, 'tpr': 0.716791165962975}, 1), (0.9312022099987701, 0.3583955829814875, 0.4271933729827174, 0.7902439024390244, {'recall': 0.7902439024390244, 'fpr': 0.2783864118895966, 'f1score': 0.3168394289067084, 'precision': 0.19814090019569472, 'tpr': 0.7902439024390244}, 2), (0.9312022099987701, 0.3583955829814875, 0.4271933729827174, 0.8099415204678363, {'recall': 0.8099415204678363, 'fpr': 0.1597587905554612, 'f1score': 0.4446227929373997, 'precision': 0.3064159292035398, 'tpr': 0.8099415204678363}, 2)]
#     gen = 2
#     numgens = 20
#     numalphas = 20
#     myepsilon = 0.0001
#     mylambda = 0.5
#     final_payoff = 0.9312022099987701
 
#     rls = [(1, 0, 1, 0.6026597469996756, {'recall': 0.6026597469996756, 'fpr': 0.17700936503035916, 'f1score': 0.5578741930641045, 'precision': 0.519284516489659, 'tpr': 0.6026597469996756}, 0), (0, 0, 1, 0.8170254403131115, {'recall': 0.8170254403131115, 'fpr': 0.13652572592969944, 'f1score': 0.481962481962482, 'precision': 0.3417928776094965, 'tpr': 0.8170254403131115}, 0), (6.228078541076723, 5.647058823529411, 0.41898028245268826, 0.5647058823529412, {'recall': 0.5647058823529412, 'fpr': 0.17679671457905544, 'f1score': 0.5308755760368664, 'precision': 0.5008695652173913, 'tpr': 0.5647058823529412}, 0), (6.5879960730072655, 5.940983606557378, 0.35298753355011225, 0.5940983606557377, {'recall': 0.5940983606557377, 'fpr': 0.18471794871794872, 'f1score': 0.5438991445294912, 'precision': 0.5015222806531968, 'tpr': 0.5940983606557377}, 1), (9.930350804077625, 9.246018849528761, 0.3156680454511367, 0.9246018849528762, {'recall': 0.9246018849528762, 'fpr': 0.3210943124550036, 'f1score': 0.6291463954002654, 'precision': 0.4767890062007709, 'tpr': 0.9246018849528762}, 2), (9.930350804077625, 9.246018849528761, 0.3156680454511367, 0.9246018849528762, {'recall': 0.9246018849528762, 'fpr': 0.3210943124550036, 'f1score': 0.6291463954002654, 'precision': 0.4767890062007709, 'tpr': 0.9246018849528762}, 3), (9.930350804077625, 9.246018849528761, 0.3156680454511367, 0.7, {'recall': 0.7, 'fpr': 0.3576890399320306, 'f1score': 0.24190572051669182, 'precision': 0.14621780571892112, 'tpr': 0.7}, 4), (9.930350804077625, 9.246018849528761, 0.3156680454511367, 0.8568646543330087, {'recall': 0.8568646543330087, 'fpr': 0.07551176420623461, 'f1score': 0.6294706723891274, 'precision': 0.497456189937818, 'tpr': 0.8568646543330087}, 4)]
#     gen = 4
#     numgens = 20
#     numalphas = 50
#     myepsilon = 0.0001
#     mylambda = 10
#     final_payoff = 9.930350804077625
 
#     rls = [(1, 0, 1, 0.5755418958265933, {'recall': 0.5755418958265933, 'fpr': 0.17458028633226902, 'f1score': 0.541964965727342, 'precision': 0.5120898100172712, 'tpr': 0.5755418958265933}, 0), (0, 0, 1, 0.8154296875, {'recall': 0.8154296875, 'fpr': 0.13612432065217392, 'f1score': 0.4823801270941652, 'precision': 0.3424938474159147, 'tpr': 0.8154296875}, 0), (6.313700201551771, 5.651612903225807, 0.3379127016740364, 0.5651612903225807, {'recall': 0.5651612903225807, 'fpr': 0.17051546391752578, 'f1score': 0.538579772517676, 'precision': 0.5143863769817968, 'tpr': 0.5651612903225807}, 0), (8.290367996601207, 7.940026075619296, 0.6496580790180904, 0.7940026075619296, {'recall': 0.7940026075619296, 'fpr': 0.23479243732018085, 'f1score': 0.6254974964693799, 'precision': 0.5159923744969286, 'tpr': 0.7940026075619296}, 1), (6.932056298963911, 6.685100845803513, 0.7530445468396021, 0.6685100845803513, {'recall': 0.6685100845803513, 'fpr': 0.18537939543491672, 'f1score': 0.5929024812463936, 'precision': 0.5326594090202177, 'tpr': 0.6685100845803513}, 2), (9.534734166208114, 9.174725983236621, 0.6399918170285073, 0.9174725983236621, {'recall': 0.9174725983236621, 'fpr': 0.3109919571045576, 'f1score': 0.6349843819723338, 'precision': 0.4854998294097578, 'tpr': 0.9174725983236621}, 3), (9.534734166208114, 9.174725983236621, 0.6399918170285073, 0.9174725983236621, {'recall': 0.9174725983236621, 'fpr': 0.3109919571045576, 'f1score': 0.6349843819723338, 'precision': 0.4854998294097578, 'tpr': 0.9174725983236621}, 4), (9.534734166208114, 9.174725983236621, 0.6399918170285073, 0.6702439024390244, {'recall': 0.6702439024390244, 'fpr': 0.40535031847133757, 'f1score': 0.21187355435620664, 'precision': 0.12582417582417582, 'tpr': 0.6702439024390244}, 5), (9.534734166208114, 9.174725983236621, 0.6399918170285073, 0.8218780251694094, {'recall': 0.8218780251694094, 'fpr': 0.0758902014107249, 'f1score': 0.6118918918918919, 'precision': 0.4873708381171068, 'tpr': 0.8218780251694094}, 5)]
#     gen = 5
#     numgens = 20
#     numalphas = 100
#     myepsilon = 0.0001
#     mylambda = 10
#     final_payoff = 9.534734166208114
 
#     rls = [(1, 0, 1, 0.5896272285251215, {'recall': 0.5896272285251215, 'fpr': 0.17756047349459597, 'f1score': 0.5488007240911148, 'precision': 0.5132618510158014, 'tpr': 0.5896272285251215}, 0), (0, 0, 1, 0.8338164251207729, {'recall': 0.8338164251207729, 'fpr': 0.12571185720356992, 'f1score': 0.5111045306485046, 'precision': 0.36848847139197266, 'tpr': 0.8338164251207729}, 0), (0.832466068465521, 0.05302931596091205, 0.22056324749539113, 0.5302931596091205, {'recall': 0.5302931596091205, 'fpr': 0.17183967112024667, 'f1score': 0.5111459968602826, 'precision': 0.49333333333333335, 'tpr': 0.5302931596091205}, 0), (0.8123201244040121, 0.054739566483338734, 0.24241944207932664, 0.5473956648333873, {'recall': 0.5473956648333873, 'fpr': 0.1706663920074158, 'f1score': 0.5254658385093167, 'precision': 0.5052254404299791, 'tpr': 0.5473956648333873}, 1), (0.7922422182428226, 0.055030934549006844, 0.26278871630618417, 0.5503093454900684, {'recall': 0.5503093454900684, 'fpr': 0.17401582896495016, 'f1score': 0.5237062286953827, 'precision': 0.4995566065622229, 'tpr': 0.5503093454900684}, 2), (0.7879342938856537, 0.05298869143780291, 0.2650543975521491, 0.529886914378029, {'recall': 0.529886914378029, 'fpr': 0.16682122617207626, 'f1score': 0.5162102612527542, 'precision': 0.5032218471923903, 'tpr': 0.529886914378029}, 3), (0.7308809800749607, 0.05471391417425228, 0.3238329340992916, 0.5471391417425228, {'recall': 0.5471391417425228, 'fpr': 0.1729740847387906, 'f1score': 0.5225896599906846, 'precision': 0.500148588410104, 'tpr': 0.5471391417425228}, 4), (0.7308809800749607, 0.05471391417425228, 0.3238329340992916, 0.5471391417425228, {'recall': 0.5471391417425228, 'fpr': 0.1729740847387906, 'f1score': 0.5225896599906846, 'precision': 0.500148588410104, 'tpr': 0.5471391417425228}, 5), (0.7308809800749607, 0.05471391417425228, 0.3238329340992916, 0.7253176930596286, {'recall': 0.7253176930596286, 'fpr': 0.28827375392714616, 'f1score': 0.2875968992248062, 'precision': 0.1793570219966159, 'tpr': 0.7253176930596286}, 6), (0.7308809800749607, 0.05471391417425228, 0.3238329340992916, 0.8431752178121975, {'recall': 0.8431752178121975, 'fpr': 0.0744454831307895, 'f1score': 0.6266187050359712, 'precision': 0.4985689753863766, 'tpr': 0.8431752178121975}, 6)]
#     gen = 6
#     numgens = 20
#     numalphas = 100
#     myepsilon = 0.0001
#     mylambda = 0.1
#     final_payoff = 0.7308809800749607
 
#     rls = [(1, 0, 1, 0.5717085919634106, {'recall': 0.5717085919634106, 'fpr': 0.16942191190060582, 'f1score': 0.5417118093174431, 'precision': 0.5147058823529411, 'tpr': 0.5717085919634106}, 0), (0, 0, 1, 0.8114511352418559, {'recall': 0.8114511352418559, 'fpr': 0.12216849071010435, 'f1score': 0.5019847328244275, 'precision': 0.363395225464191, 'tpr': 0.8114511352418559}, 0), (0.7669423522023653, 0.0051666666666666675, 0.23822431446430148, 0.5166666666666667, {'recall': 0.5166666666666667, 'fpr': 0.1688911704312115, 'f1score': 0.5030225898822781, 'precision': 0.49008059516429014, 'tpr': 0.5166666666666667}, 0), (0.7669423522023653, 0.0051666666666666675, 0.23822431446430148, 0.5166666666666667, {'recall': 0.5166666666666667, 'fpr': 0.1688911704312115, 'f1score': 0.5030225898822781, 'precision': 0.49008059516429014, 'tpr': 0.5166666666666667}, 1), (0.7669423522023653, 0.0051666666666666675, 0.23822431446430148, 0.7196896217264791, {'recall': 0.7196896217264791, 'fpr': 0.31430028039765484, 'f1score': 0.2711988304093567, 'precision': 0.16707948660211663, 'tpr': 0.7196896217264791}, 2), (0.7669423522023653, 0.0051666666666666675, 0.23822431446430148, 0.8352941176470589, {'recall': 0.8352941176470589, 'fpr': 0.07758913412563667, 'f1score': 0.6116295764536971, 'precision': 0.4824462061155153, 'tpr': 0.8352941176470589}, 2)]
#     gen = 2
#     numgens = 20
#     numalphas = 50
#     myepsilon = 0.0001
#     mylambda = 0.01
#     final_payoff = 0.7669423522023653

#     rls = [(1, 0, 1, 0.5887758450935346, {'recall': 0.5887758450935346, 'fpr': 0.17820157900133293, 'f1score': 0.5453716370269038, 'precision': 0.5079275198187996, 'tpr': 0.5887758450935346}, 0), (0, 0, 1, 0.8250244379276638, {'recall': 0.8250244379276638, 'fpr': 0.138320455124395, 'f1score': 0.482837528604119, 'precision': 0.34128588758592804, 'tpr': 0.8250244379276638}, 0), (3.4820668328792945, 2.7661999348746336, 0.28413310199533903, 0.5532399869749267, {'recall': 0.5532399869749267, 'fpr': 0.1752492548052215, 'f1score': 0.5247876447876448, 'precision': 0.4991186839012926, 'tpr': 0.5532399869749267}, 0), (3.4189565263794734, 2.6940639269406392, 0.2751074005611658, 0.5388127853881278, {'recall': 0.5388127853881278, 'fpr': 0.17279638380932813, 'f1score': 0.51625, 'precision': 0.495500899820036, 'tpr': 0.5388127853881278}, 1), (3.361784726560024, 2.6949317738791425, 0.3331470473191187, 0.5389863547758285, {'recall': 0.5389863547758285, 'fpr': 0.17280394980456695, 'f1score': 0.5170640486208509, 'precision': 0.4968553459119497, 'tpr': 0.5389863547758285}, 2), (4.641854103128575, 4.292437520285621, 0.6505834171570459, 0.8584875040571243, {'recall': 0.8584875040571243, 'fpr': 0.2957094351270707, 'f1score': 0.6151162790697674, 'precision': 0.4792534879507157, 'tpr': 0.8584875040571243}, 3), (4.641854103128575, 4.292437520285621, 0.6505834171570459, 0.8584875040571243, {'recall': 0.8584875040571243, 'fpr': 0.2957094351270707, 'f1score': 0.6151162790697674, 'precision': 0.4792534879507157, 'tpr': 0.8584875040571243}, 4), (4.641854103128575, 4.292437520285621, 0.6505834171570459, 0.7409579667644184, {'recall': 0.7409579667644184, 'fpr': 0.26611191305086185, 'f1score': 0.30844354018311293, 'precision': 0.1947584789311408, 'tpr': 0.7409579667644184}, 5), (4.641854103128575, 4.292437520285621, 0.6505834171570459, 0.8571428571428571, {'recall': 0.8571428571428571, 'fpr': 0.09184192672998644, 'f1score': 0.584771573604061, 'precision': 0.4437596302003082, 'tpr': 0.8571428571428571}, 5)]
#     gen = 5
#     numgens = 20
#     numalphas = 50
#     myepsilon = 0.0001
#     mylambda = 5
#     final_payoff = 4.641854103128575

#     rls = [(1, 0, 1, 0.592156862745098, {'recall': 0.592156862745098, 'fpr': 0.17874743326488707, 'f1score': 0.5480114925147437, 'precision': 0.5099915564311849, 'tpr': 0.592156862745098}, 0), (0, 0, 1, 0.810126582278481, {'recall': 0.810126582278481, 'fpr': 0.12910897817038988, 'f1score': 0.49245338857650195, 'precision': 0.35374149659863946, 'tpr': 0.810126582278481}, 0), (0.8664487232624751, 0.10628238341968912, 0.23983366015721397, 0.5314119170984456, {'recall': 0.5314119170984456, 'fpr': 0.17030477759472817, 'f1score': 0.5141782860723798, 'precision': 0.49802731411229134, 'tpr': 0.5314119170984456}, 0), (0.8664487232624751, 0.10628238341968912, 0.23983366015721397, 0.5314119170984456, {'recall': 0.5314119170984456, 'fpr': 0.17030477759472817, 'f1score': 0.5141782860723798, 'precision': 0.49802731411229134, 'tpr': 0.5314119170984456}, 1), (0.8664487232624751, 0.10628238341968912, 0.23983366015721397, 0.7771260997067448, {'recall': 0.7771260997067448, 'fpr': 0.2864057060371911, 'f1score': 0.3062993642843383, 'precision': 0.19073896353166986, 'tpr': 0.7771260997067448}, 2), (0.8664487232624751, 0.10628238341968912, 0.23983366015721397, 0.842, {'recall': 0.842, 'fpr': 0.08237288135593221, 'f1score': 0.5984363894811656, 'precision': 0.46416758544652703, 'tpr': 0.842}, 2)]
#     gen = 2
#     numgens = 20
#     numalphas = 100
#     myepsilon = 0.0001
#     mylambda = 0.2
#     final_payoff = 0.8664487232624751
 
#     rls = [(1, 0, 1, 0.590715920235371, {'recall': 0.590715920235371, 'fpr': 0.18150087260034903, 'f1score': 0.5447693699125716, 'precision': 0.5054545454545455, 'tpr': 0.590715920235371}, 0), (0, 0, 1, 0.8017664376840039, {'recall': 0.8017664376840039, 'fpr': 0.1325014854426619, 'f1score': 0.4810126582278481, 'precision': 0.3435660218671152, 'tpr': 0.8017664376840039}, 0), (11.776053594301853, 11.06562703053931, 0.28957343623745757, 0.5532813515269656, {'recall': 0.5532813515269656, 'fpr': 0.1734211067681547, 'f1score': 0.526673882789547, 'precision': 0.5025081144880496, 'tpr': 0.5532813515269656}, 0), (11.776053594301853, 11.06562703053931, 0.28957343623745757, 0.5532813515269656, {'recall': 0.5532813515269656, 'fpr': 0.1734211067681547, 'f1score': 0.526673882789547, 'precision': 0.5025081144880496, 'tpr': 0.5532813515269656}, 1), (11.776053594301853, 11.06562703053931, 0.28957343623745757, 0.8490749756572541, {'recall': 0.8490749756572541, 'fpr': 0.1945978085449758, 'f1score': 0.4162291169451074, 'precision': 0.2756876383180525, 'tpr': 0.8490749756572541}, 2), (11.776053594301853, 11.06562703053931, 0.28957343623745757, 0.8435972629521017, {'recall': 0.8435972629521017, 'fpr': 0.0816846395516685, 'f1score': 0.6060393258426966, 'precision': 0.4728767123287671, 'tpr': 0.8435972629521017}, 2)]
#     gen = 2
#     numgens = 20
#     numalphas = 100
#     myepsilon = 0.0001
#     mylambda = 20
#     final_payoff = 11.776053594301853

#     rls = 
#     gen = 
#     numgens = 
#     numalphas = 
#     myepsilon = 
#     mylambda = 
#     final_payoff = 

# Following are results for experiment when error is 1-recall

#     rls = [(1, 0, 1, 0.586105675146771, {'recall': 0.586105675146771, 'fpr': 0.1776248202177933, 'f1score': 0.5452063106796117, 'precision': 0.5096426545660806, 'tpr': 0.586105675146771}, 0), (0, 0, 1, 0.8166828322017459, {'recall': 0.8166828322017459, 'fpr': 0.1325516186591894, 'f1score': 0.4905330614622779, 'precision': 0.350541215653622, 'tpr': 0.8166828322017459}, 0), (1.1780682070157824, 0.47693307342430147, 0.29886486640851917, 0.5230669265756985, {'recall': 0.5230669265756985, 'fpr': 0.16467804978399506, 'f1score': 0.5120050882493242, 'precision': 0.5014014325755216, 'tpr': 0.5230669265756985}, 0), (1.2807443361825106, 0.632952691680261, 0.3522083554977504, 0.367047308319739, {'recall': 0.367047308319739, 'fpr': 0.4611196712891628, 'f1score': 0.25924645696508813, 'precision': 0.20039187744923406, 'tpr': 0.367047308319739}, 1), (1.2807443361825106, 0.632952691680261, 0.3522083554977504, 0.367047308319739, {'recall': 0.367047308319739, 'fpr': 0.4611196712891628, 'f1score': 0.25924645696508813, 'precision': 0.20039187744923406, 'tpr': 0.367047308319739}, 2), (1.2807443361825106, 0.632952691680261, 0.3522083554977504, 0.7064579256360078, {'recall': 0.7064579256360078, 'fpr': 0.25921209033791814, 'f1score': 0.30102147175317906, 'precision': 0.19125827814569538, 'tpr': 0.7064579256360078}, 3), (1.2807443361825106, 0.632952691680261, 0.3522083554977504, 0.8462291870714985, {'recall': 0.8462291870714985, 'fpr': 0.07861448340266576, 'f1score': 0.6147278548559232, 'precision': 0.48268156424581005, 'tpr': 0.8462291870714985}, 3)]
#     gen = 3
#     numgens = 20 
#     numalphas = 10
#     myepsilon = 0.0001
#     mylambda = 1
#     final_payoff = 1.2807443361825106

#     rls = [(1, 0, 1, 0.5706840390879478, {'recall': 0.5706840390879478, 'fpr': 0.17800616649537512, 'f1score': 0.5346353371986573, 'precision': 0.5028702640642939, 'tpr': 0.5706840390879478}, 0), (0, 0, 1, 0.8305905130687319, {'recall': 0.8305905130687319, 'fpr': 0.10835387099515595, 'f1score': 0.542008843967151, 'precision': 0.4022503516174402, 'tpr': 0.8305905130687319}, 0), (5.576203915910264, 4.915254237288136, 0.33905032137787217, 0.5084745762711864, {'recall': 0.5084745762711864, 'fpr': 0.16337854500616522, 'f1score': 0.5017690575747829, 'precision': 0.49523809523809526, 'tpr': 0.5084745762711864}, 0), (8.439891588190555, 8.121349772874757, 0.6814581846842014, 0.18786502271252434, {'recall': 0.18786502271252434, 'fpr': 0.46213212595184194, 'f1score': 0.14205103042198233, 'precision': 0.11420118343195267, 'tpr': 0.18786502271252434}, 1), (8.439891588190555, 8.121349772874757, 0.6814581846842014, 0.18786502271252434, {'recall': 0.18786502271252434, 'fpr': 0.46213212595184194, 'f1score': 0.14205103042198233, 'precision': 0.11420118343195267, 'tpr': 0.18786502271252434}, 2), (8.439891588190555, 8.121349772874757, 0.6814581846842014, 0.6804619826756496, {'recall': 0.6804619826756496, 'fpr': 0.37785902559306184, 'f1score': 0.2284329563812601, 'precision': 0.13725490196078433, 'tpr': 0.6804619826756496}, 3), (8.439891588190555, 8.121349772874757, 0.6814581846842014, 0.8493150684931506, {'recall': 0.8493150684931506, 'fpr': 0.0748853795211411, 'f1score': 0.6262626262626263, 'precision': 0.496, 'tpr': 0.8493150684931506}, 3)]
#     gen = 3
#     numgens = 20
#     numalphas = 50
#     myepsilon = 0.0001
#     mylambda = 10
#     final_payoff = 8.439891588190555
 
#     rls = [(1, 0, 1, 0.6, {'recall': 0.6, 'fpr': 0.176464542651593, 'f1score': 0.5557399306079348, 'precision': 0.5175611126720989, 'tpr': 0.6}, 0), (0, 0, 1, 0.8299516908212561, {'recall': 0.8299516908212561, 'fpr': 0.1317467063323417, 'f1score': 0.4988385598141696, 'precision': 0.35657949356579494, 'tpr': 0.8299516908212561}, 0), (10.632242406180278, 9.993485342019543, 0.3612429358392646, 0.5003257328990228, {'recall': 0.5003257328990228, 'fpr': 0.16073997944501542, 'f1score': 0.4978930307941653, 'precision': 0.49548387096774194, 'tpr': 0.5003257328990228}, 0), (17.317661081614002, 16.975169300225733, 0.6575082186117314, 0.15124153498871332, {'recall': 0.15124153498871332, 'fpr': 0.5523249819569028, 'f1score': 0.1050744931107875, 'precision': 0.0805012015104703, 'tpr': 0.15124153498871332}, 1), (14.284966059257641, 13.680760406424124, 0.39579434716648265, 0.31596197967879386, {'recall': 0.31596197967879386, 'fpr': 0.3541901733511129, 'f1score': 0.258168184252812, 'precision': 0.2182476794204211, 'tpr': 0.31596197967879386}, 2), (15.261417308524516, 14.947780678851174, 0.6863633703266583, 0.25261096605744127, {'recall': 0.25261096605744127, 'fpr': 0.5028759244042728, 'f1score': 0.17723837874971377, 'precision': 0.1365079365079365, 'tpr': 0.25261096605744127}, 3), (19.931919382044768, 19.49119373776908, 0.5592743557243125, 0.025440313111545987, {'recall': 0.025440313111545987, 'fpr': 0.6677624820217793, 'f1score': 0.016175860638739114, 'precision': 0.011857707509881422, 'tpr': 0.025440313111545987}, 4), (19.931919382044768, 19.49119373776908, 0.5592743557243125, 0.025440313111545987, {'recall': 0.025440313111545987, 'fpr': 0.6677624820217793, 'f1score': 0.016175860638739114, 'precision': 0.011857707509881422, 'tpr': 0.025440313111545987}, 5), (19.931919382044768, 19.49119373776908, 0.5592743557243125, 0.8334956183057449, {'recall': 0.8334956183057449, 'fpr': 0.07534188397179988, 'f1score': 0.6180505415162455, 'precision': 0.4911072862880092, 'tpr': 0.8334956183057449}, 6), (19.931919382044768, 19.49119373776908, 0.5592743557243125, 0.8468292682926829, {'recall': 0.8468292682926829, 'fpr': 0.08602972399150743, 'f1score': 0.5973847212663455, 'precision': 0.4614566719829878, 'tpr': 0.8468292682926829}, 6)]
#     gen = 6
#     numgens = 20
#     numalphas = 100
#     myepsilon = 0.0001
#     mylambda = 20
#     final_payoff = 19.931919382044768

#     rls = [(1, 0, 1, 0.6009174311926605, {'recall': 0.6009174311926605, 'fpr': 0.18516618793598688, 'f1score': 0.5481990733821551, 'precision': 0.5039846111569113, 'tpr': 0.6009174311926605}, 0), (0, 0, 1, 0.8181818181818182, {'recall': 0.8181818181818182, 'fpr': 0.12587115417304096, 'f1score': 0.5034216007140732, 'precision': 0.3635582294800172, 'tpr': 0.8181818181818182}, 0), (0.9222687909075138, 0.23448163795905103, 0.3122128470515373, 0.531036724081898, {'recall': 0.531036724081898, 'fpr': 0.17000925640234496, 'f1score': 0.5135135135135135, 'precision': 0.49710982658959535, 'tpr': 0.531036724081898}, 0), (0.8541820534283024, 0.24081967213114752, 0.3866376187028451, 0.518360655737705, {'recall': 0.518360655737705, 'fpr': 0.1722051282051282, 'f1score': 0.5011093502377179, 'precision': 0.4849693251533742, 'tpr': 0.518360655737705}, 1), (0.8320489630237852, 0.24812275546849494, 0.41607379244470966, 0.5037544890630101, {'recall': 0.5037544890630101, 'fpr': 0.19965081647324637, 'f1score': 0.47114503816793896, 'precision': 0.4425007169486665, 'tpr': 0.5037544890630101}, 2), (0.8320489630237852, 0.24812275546849494, 0.41607379244470966, 0.5037544890630101, {'recall': 0.5037544890630101, 'fpr': 0.19965081647324637, 'f1score': 0.47114503816793896, 'precision': 0.4425007169486665, 'tpr': 0.5037544890630101}, 3), (0.8320489630237852, 0.24812275546849494, 0.41607379244470966, 0.72265625, {'recall': 0.72265625, 'fpr': 0.2868546195652174, 'f1score': 0.28782574873590044, 'precision': 0.17969888295288974, 'tpr': 0.72265625}, 4), (0.8320489630237852, 0.24812275546849494, 0.41607379244470966, 0.8245264207377866, {'recall': 0.8245264207377866, 'fpr': 0.08307196744935152, 'f1score': 0.5886120996441281, 'precision': 0.45766463752075265, 'tpr': 0.8245264207377866}, 4)]
#     gen = 4
#     numgens = 20
#     numalphas = 20
#     myepsilon = 0.0001
#     mylambda = 0.5
#     final_payoff = 0.8320489630237852

#     rls = [(1, 0, 1, 0.6053577262332571, {'recall': 0.6053577262332571, 'fpr': 0.17999794640106787, 'f1score': 0.5558722063896805, 'precision': 0.5138657792567942, 'tpr': 0.6053577262332571}, 0), (0, 0, 1, 0.8316929133858267, {'recall': 0.8316929133858267, 'fpr': 0.1379837067209776, 'f1score': 0.48465729853742473, 'precision': 0.3419668150546338, 'tpr': 0.8316929133858267}, 0), (0.8284613089456938, 0.09125326370757181, 0.262791954761878, 0.543733681462141, {'recall': 0.543733681462141, 'fpr': 0.17142563681183237, 'f1score': 0.5207063603688076, 'precision': 0.49955022488755624, 'tpr': 0.543733681462141}, 0), (0.8284613089456938, 0.09125326370757181, 0.262791954761878, 0.543733681462141, {'recall': 0.543733681462141, 'fpr': 0.17142563681183237, 'f1score': 0.5207063603688076, 'precision': 0.49955022488755624, 'tpr': 0.543733681462141}, 1), (0.8284613089456938, 0.09125326370757181, 0.262791954761878, 0.7704280155642024, {'recall': 0.7704280155642024, 'fpr': 0.2610431532449881, 'f1score': 0.3237277743715512, 'precision': 0.20491591203104786, 'tpr': 0.7704280155642024}, 2), (0.8284613089456938, 0.09125326370757181, 0.262791954761878, 0.8446411012782694, {'recall': 0.8446411012782694, 'fpr': 0.09657981838241535, 'f1score': 0.5700066357000664, 'precision': 0.4301452178267401, 'tpr': 0.8446411012782694}, 2)]
#     gen = 2
#     numgens = 20
#     numalphas = 50
#     myepsilon = 0.0001
#     mylambda = 0.2
#     final_payoff = 0.8284613089456938 

#     rls = [(1, 0, 1, 0.6018246985988921, {'recall': 0.6018246985988921, 'fpr': 0.18518137909772892, 'f1score': 0.549866031557011, 'precision': 0.506166072896684, 'tpr': 0.6018246985988921}, 0), (0, 0, 1, 0.8091528724440117, {'recall': 0.8091528724440117, 'fpr': 0.1299583793425635, 'f1score': 0.49055489964580873, 'precision': 0.3519695044472681, 'tpr': 0.8091528724440117}, 0), (0.7672730381542716, 0.004607684856312561, 0.23733464670204096, 0.539231514368744, {'recall': 0.539231514368744, 'fpr': 0.17066886529939193, 'f1score': 0.5200062276194924, 'precision': 0.50210463018641, 'tpr': 0.539231514368744}, 0), (0.7543424797643027, 0.004323616115296429, 0.24998113635099373, 0.5676383884703571, {'recall': 0.5676383884703571, 'fpr': 0.2774186929311583, 'f1score': 0.46275033377837116, 'precision': 0.3905792201938247, 'tpr': 0.5676383884703571}, 1), (0.731421660653315, 0.004809791597750579, 0.2733881309444355, 0.5190208402249421, {'recall': 0.5190208402249421, 'fpr': 0.17070676076506086, 'f1score': 0.5011978917105894, 'precision': 0.4845583693638048, 'tpr': 0.5190208402249421}, 2), (0.744277083189356, 0.005, 0.26072291681064386, 0.5, {'recall': 0.5, 'fpr': 0.19691358024691358, 'f1score': 0.4713804713804714, 'precision': 0.445859872611465, 'tpr': 0.5}, 3), (0.731421660653315, 0.004809791597750579, 0.2733881309444355, 0.5190208402249421, {'recall': 0.5190208402249421, 'fpr': 0.17070676076506086, 'f1score': 0.5011978917105894, 'precision': 0.4845583693638048, 'tpr': 0.5190208402249421}, 4), (0.731421660653315, 0.004809791597750579, 0.2733881309444355, 0.5190208402249421, {'recall': 0.5190208402249421, 'fpr': 0.17070676076506086, 'f1score': 0.5011978917105894, 'precision': 0.4845583693638048, 'tpr': 0.5190208402249421}, 5), (0.731421660653315, 0.004809791597750579, 0.2733881309444355, 0.8226120857699805, {'recall': 0.8226120857699805, 'fpr': 0.2221844742653304, 'f1score': 0.3762817654926438, 'precision': 0.24393063583815028, 'tpr': 0.8226120857699805}, 6), (0.731421660653315, 0.004809791597750579, 0.2733881309444355, 0.8620019436345967, {'recall': 0.8620019436345967, 'fpr': 0.07569450344065924, 'f1score': 0.6319914499465622, 'precision': 0.49887514060742405, 'tpr': 0.8620019436345967}, 6)]
#     gen = 6
#     numgens = 20
#     numalphas = 50
#     myepsilon = 0.0001
#     mylambda = 0.01
#     final_payoff = 0.731421660653315

#     rls = [(1, 0, 1, 0.5846153846153846, {'recall': 0.5846153846153846, 'fpr': 0.1762955361723961, 'f1score': 0.5445952126848606, 'precision': 0.509703196347032, 'tpr': 0.5846153846153846}, 0), (0, 0, 1, 0.8163064833005894, {'recall': 0.8163064833005894, 'fpr': 0.12374809030724834, 'f1score': 0.5025703054127608, 'precision': 0.36304062909567497, 'tpr': 0.8163064833005894}, 0), (5.530996766216198, 4.839973873285435, 0.30897710706923665, 0.5160026126714565, {'recall': 0.5160026126714565, 'fpr': 0.1671801191209694, 'f1score': 0.5039872408293461, 'precision': 0.4925187032418953, 'tpr': 0.5160026126714565}, 0), (8.301517026209632, 7.812704649639817, 0.5111876234301835, 0.21872953503601833, {'recall': 0.21872953503601833, 'fpr': 0.46306176893084344, 'f1score': 0.16223436551305404, 'precision': 0.1289326384867786, 'tpr': 0.21872953503601833}, 1), (7.4670826745024055, 6.983349657198826, 0.5162669826964201, 0.30166503428011754, {'recall': 0.30166503428011754, 'fpr': 0.3636643730101674, 'f1score': 0.2454835281615303, 'precision': 0.20694288913773795, 'tpr': 0.30166503428011754}, 2), (7.898058462965916, 7.397975840679073, 0.4999173777131576, 0.2602024159320927, {'recall': 0.2602024159320927, 'fpr': 0.48166786484543495, 'f1score': 0.1864327485380117, 'precision': 0.14525241479861492, 'tpr': 0.2602024159320927}, 3), (7.898058462965916, 7.397975840679073, 0.4999173777131576, 0.2602024159320927, {'recall': 0.2602024159320927, 'fpr': 0.48166786484543495, 'f1score': 0.1864327485380117, 'precision': 0.14525241479861492, 'tpr': 0.2602024159320927}, 4), (7.898058462965916, 7.397975840679073, 0.4999173777131576, 0.733847637415622, {'recall': 0.733847637415622, 'fpr': 0.3433647878942447, 'f1score': 0.26075038547198903, 'precision': 0.15854166666666666, 'tpr': 0.733847637415622}, 5), (7.898058462965916, 7.397975840679073, 0.4999173777131576, 0.84106614017769, {'recall': 0.84106614017769, 'fpr': 0.07627046746415543, 'f1score': 0.6164978292329957, 'precision': 0.48657909765848084, 'tpr': 0.84106614017769}, 5)]
#     gen = 5
#     numgens = 20
#     numalphas = 100
#     myepsilon = 0.0001
#     mylambda = 10
#     final_payoff = 7.898058462965916

#     rls = [(1, 0, 1, 0.5864217776320105, {'recall': 0.5864217776320105, 'fpr': 0.1755717362321813, 'f1score': 0.5460375629867156, 'precision': 0.5108571428571429, 'tpr': 0.5864217776320105}, 0), (0, 0, 1, 0.8212180746561886, {'recall': 0.8212180746561886, 'fpr': 0.13664912578509592, 'f1score': 0.48267898383371827, 'precision': 0.3417825020441537, 'tpr': 0.8212180746561886}, 0), (5.4084124530589985, 4.728808054563169, 0.32039560150417046, 0.5271191945436831, {'recall': 0.5271191945436831, 'fpr': 0.16623804135377018, 'f1score': 0.5137701804368471, 'precision': 0.5010805804260574, 'tpr': 0.5271191945436831}, 0), (7.056313129027419, 6.615434924787442, 0.5591217957600225, 0.3384565075212557, {'recall': 0.3384565075212557, 'fpr': 0.33781564360500926, 'f1score': 0.2803358613217768, 'precision': 0.239251040221914, 'tpr': 0.3384565075212557}, 1), (6.66867472800063, 6.280209013716524, 0.6115342857158943, 0.3719790986283475, {'recall': 0.3719790986283475, 'fpr': 0.2929759704251386, 'f1score': 0.3229373405160193, 'precision': 0.2853206412825651, 'tpr': 0.3719790986283475}, 2), (7.622312829417546, 7.157310704960835, 0.5349978755432891, 0.28426892950391647, {'recall': 0.28426892950391647, 'fpr': 0.39800739523418244, 'f1score': 0.22304737516005121, 'precision': 0.1835229667088074, 'tpr': 0.28426892950391647}, 3), (6.66867472800063, 6.280209013716524, 0.6115342857158943, 0.3719790986283475, {'recall': 0.3719790986283475, 'fpr': 0.2929759704251386, 'f1score': 0.3229373405160193, 'precision': 0.2853206412825651, 'tpr': 0.3719790986283475}, 4), (6.66867472800063, 6.280209013716524, 0.6115342857158943, 0.3719790986283475, {'recall': 0.3719790986283475, 'fpr': 0.2929759704251386, 'f1score': 0.3229373405160193, 'precision': 0.2853206412825651, 'tpr': 0.3719790986283475}, 5), (6.66867472800063, 6.280209013716524, 0.6115342857158943, 0.8382352941176471, {'recall': 0.8382352941176471, 'fpr': 0.21103565365025467, 'f1score': 0.39211190094015136, 'precision': 0.25591140377132593, 'tpr': 0.8382352941176471}, 6), (6.66867472800063, 6.280209013716524, 0.6115342857158943, 0.8458536585365853, {'recall': 0.8458536585365853, 'fpr': 0.07940552016985138, 'f1score': 0.6133710647329325, 'precision': 0.4811320754716981, 'tpr': 0.8458536585365853}, 6)]
#     gen = 6
#     numgens = 20
#     numalphas = 20
#     myepsilon = 0.0001
#     mylambda = 10
#     final_payoff = 6.66867472800063

#     rls = [(1, 0, 1, 0.5872656755009696, {'recall': 0.5872656755009696, 'fpr': 0.17494333402019369, 'f1score': 0.5498562566197609, 'precision': 0.5169274537695591, 'tpr': 0.5872656755009696}, 0), (0, 0, 1, 0.841948310139165, {'recall': 0.841948310139165, 'fpr': 0.11446498219433611, 'f1score': 0.528879175772713, 'precision': 0.38552571688666365, 'tpr': 0.841948310139165}, 0), (5.613622059272161, 4.936211972522081, 0.3225899132499199, 0.5063788027477919, {'recall': 0.5063788027477919, 'fpr': 0.16463101714051115, 'f1score': 0.4986310194878402, 'precision': 0.49111675126903553, 'tpr': 0.5063788027477919}, 0), (5.41478418963845, 4.8249918220477594, 0.4102076324093096, 0.517500817795224, {'recall': 0.517500817795224, 'fpr': 0.16832597762496151, 'f1score': 0.5039018952062431, 'precision': 0.4909993792675357, 'tpr': 0.517500817795224}, 1), (6.391601202706889, 5.976408912188729, 0.58480770948184, 0.40235910878112713, {'recall': 0.40235910878112713, 'fpr': 0.3090890439064424, 'f1score': 0.3367612779377485, 'precision': 0.2895543503890592, 'tpr': 0.40235910878112713}, 2), (5.210716244515645, 4.779627815866797, 0.5689115713511521, 0.5220372184133203, {'recall': 0.5220372184133203, 'fpr': 0.16853240217726198, 'f1score': 0.5073774393146121, 'precision': 0.4935185185185185, 'tpr': 0.5220372184133203}, 3), (6.057424570435412, 5.702614379084967, 0.6451898086495547, 0.4297385620915033, {'recall': 0.4297385620915033, 'fpr': 0.2557494866529774, 'f1score': 0.3830468977570638, 'precision': 0.34550709406200736, 'tpr': 0.4297385620915033}, 4), (6.057424570435412, 5.702614379084967, 0.6451898086495547, 0.4297385620915033, {'recall': 0.4297385620915033, 'fpr': 0.2557494866529774, 'f1score': 0.3830468977570638, 'precision': 0.34550709406200736, 'tpr': 0.4297385620915033}, 5), (6.057424570435412, 5.702614379084967, 0.6451898086495547, 0.8442703232125367, {'recall': 0.8442703232125367, 'fpr': 0.09848034637914933, 'f1score': 0.5665461715412422, 'precision': 0.42631058358061324, 'tpr': 0.8442703232125367}, 6), (6.057424570435412, 5.702614379084967, 0.6451898086495547, 0.8381046396841066, {'recall': 0.8381046396841066, 'fpr': 0.0749130397895987, 'f1score': 0.6185792349726776, 'precision': 0.49018475750577367, 'tpr': 0.8381046396841066}, 6)]
#     gen = 6
#     numgens = 20
#     numalphas = 10
#     myepsilon = 0.0001
#     mylambda = 10
#     final_payoff = 6.057424570435412

#     rls = [(1, 0, 1, 0.6139717940308298, {'recall': 0.6139717940308298, 'fpr': 0.18264793354527742, 'f1score': 0.55863921217547, 'precision': 0.5124555160142349, 'tpr': 0.6139717940308298}, 0), (0, 0, 1, 0.8214285714285714, {'recall': 0.8214285714285714, 'fpr': 0.14187351241074464, 'f1score': 0.47862767154105734, 'precision': 0.3376984126984127, 'tpr': 0.8214285714285714}, 0), (1.004525986978824, 0.23230668414154654, 0.22778069716272253, 0.5353866317169069, {'recall': 0.5353866317169069, 'fpr': 0.17336889618383258, 'f1score': 0.5125470514429109, 'precision': 0.4915764139590854, 'tpr': 0.5353866317169069}, 0), (0.9979098447629909, 0.22866839043309634, 0.23075854567010545, 0.5426632191338073, {'recall': 0.5426632191338073, 'fpr': 0.17113125901504225, 'f1score': 0.5219148274790177, 'precision': 0.5026946107784431, 'tpr': 0.5426632191338073}, 1), (0.9976697759933637, 0.30346631785480704, 0.30579654186144345, 0.39306736429038586, {'recall': 0.39306736429038586, 'fpr': 0.2762266475056457, 'f1score': 0.3458495180549561, 'precision': 0.30875931158489595, 'tpr': 0.39306736429038586}, 2), (0.9982853407607597, 0.24886141834743009, 0.25057607758667033, 0.5022771633051398, {'recall': 0.5022771633051398, 'fpr': 0.18846391116594693, 'f1score': 0.4786854751201364, 'precision': 0.45721054190109567, 'tpr': 0.5022771633051398}, 3), (1.053429735573995, 0.4550653594771242, 0.4016356239031291, 0.08986928104575163, {'recall': 0.08986928104575163, 'fpr': 0.6237166324435318, 'f1score': 0.05844845908607864, 'precision': 0.04330708661417323, 'tpr': 0.08986928104575163}, 4), (1.053429735573995, 0.4550653594771242, 0.4016356239031291, 0.08986928104575163, {'recall': 0.08986928104575163, 'fpr': 0.6237166324435318, 'f1score': 0.05844845908607864, 'precision': 0.04330708661417323, 'tpr': 0.08986928104575163}, 5), (1.053429735573995, 0.4550653594771242, 0.4016356239031291, 0.7573385518590998, {'recall': 0.7573385518590998, 'fpr': 0.31796569876040076, 'f1score': 0.2793719545208446, 'precision': 0.1712768311573357, 'tpr': 0.7573385518590998}, 6), (1.053429735573995, 0.4550653594771242, 0.4016356239031291, 0.8501945525291829, {'recall': 0.8501945525291829, 'fpr': 0.07628270472307169, 'f1score': 0.6242857142857143, 'precision': 0.4932279909706546, 'tpr': 0.8501945525291829}, 6)]
#     gen = 6
#     numgens = 20
#     numalphas = 100
#     myepsilon = 0.0001
#     mylambda = 0.5
#     final_payoff = 1.053429735573995

    rls = [(1, 0, 1, 0.6066536203522505, {'recall': 0.6066536203522505, 'fpr': 0.181631395109924, 'f1score': 0.5557215416791156, 'precision': 0.5126791620727673, 'tpr': 0.6066536203522505}, 0), (0, 0, 1, 0.8287937743190662, {'recall': 0.8287937743190662, 'fpr': 0.13685015290519878, 'f1score': 0.48811228874248064, 'precision': 0.3459196102314251, 'tpr': 0.8287937743190662}, 0), (1.179715160662358, 0.43461160275319566, 0.2548964420908377, 0.5653883972468043, {'recall': 0.5653883972468043, 'fpr': 0.17488973228023388, 'f1score': 0.5323252584477705, 'precision': 0.5029154518950437, 'tpr': 0.5653883972468043}, 0), (1.1363456471017066, 0.46028645833333337, 0.3239408112316269, 0.5397135416666666, {'recall': 0.5397135416666666, 'fpr': 0.17321134868421054, 'f1score': 0.5169134840218238, 'precision': 0.4959617110379898, 'tpr': 0.5397135416666666}, 1), (1.1363456471017066, 0.46028645833333337, 0.3239408112316269, 0.5397135416666666, {'recall': 0.5397135416666666, 'fpr': 0.17321134868421054, 'f1score': 0.5169134840218238, 'precision': 0.4959617110379898, 'tpr': 0.5397135416666666}, 2), (1.1363456471017066, 0.46028645833333337, 0.3239408112316269, 0.81648675171737, {'recall': 0.81648675171737, 'fpr': 0.1817332993803582, 'f1score': 0.4168336673346693, 'precision': 0.2798520013454423, 'tpr': 0.81648675171737}, 3), (1.1363456471017066, 0.46028645833333337, 0.3239408112316269, 0.8526829268292683, {'recall': 0.8526829268292683, 'fpr': 0.08008492569002124, 'f1score': 0.6150598170302604, 'precision': 0.4810126582278481, 'tpr': 0.8526829268292683}, 3)]
    gen = 3
    numgens = 20
    numalphas = 10
    myepsilon = 0.0001
    mylambda = 1
    final_payoff = 1.1363456471017066
    
    results = {}

    rls[0][4]['payoff'] = rls[0][0]
    rls[0][4]['error'] = rls[0][1]
    rls[0][4]['norm'] = rls[0][2]
    results['training error on original training data and original testing data'] = rls[0][4]

    rls[1][4]['payoff'] = rls[1][0]
    rls[1][4]['error'] = rls[1][1]
    rls[1][4]['norm'] = rls[1][2]    
    results['testing error on original training data and original testing data'] = rls[1][4]

    rls[-2][4]['payoff'] = rls[-2][0]
    rls[-2][4]['error'] = rls[-2][1]
    rls[-2][4]['norm'] = rls[-2][2]    
    results['testing error on manipulated training data and manipulated testing data'] = rls[-2][4]

    rls[-1][4]['payoff'] = rls[-1][0]
    rls[-1][4]['error'] = rls[-1][1]
    rls[-1][4]['norm'] = rls[-1][2]    
    results['testing error on original training data and manipulated testing data'] = rls[-1][4]

    print(results)
    print('numgens',numgens)
    print('numalphas',numalphas)
    print('myepsilon',myepsilon)
    print('mylambda',mylambda)
    print('final_payoff',final_payoff)

    
    print('rls[2:-2]',rls[2:-2])
    
    trainingresults = []
    precisions = []
    recalls = []
    f1scores = []
    tprs = []
    fprs = []
    errors = []
    payoffs = []
    norms = []

    tup = rls[0]
    tup[4]['payoff'] = tup[0]
    tup[4]['error'] = tup[1]
    tup[4]['norm'] = tup[2]

    trainingresults.append(tup[4])
    precisions.append(tup[4]['precision'])
    recalls.append(tup[4]['recall'])
    f1scores.append(tup[4]['f1score'])
    tprs.append(tup[4]['tpr'])
    fprs.append(tup[4]['fpr'])
    errors.append(tup[4]['error'])
    payoffs.append(tup[4]['payoff'])
    norms.append(tup[4]['norm'])

    for tup in rls[2:-2]:
        tup[4]['payoff'] = tup[0]
        tup[4]['error'] = tup[1]
        tup[4]['norm'] = tup[2]
        trainingresults.append(tup[4])
        precisions.append(tup[4]['precision'])
        recalls.append(tup[4]['recall'])
        f1scores.append(tup[4]['f1score'])
        tprs.append(tup[4]['tpr'])
        fprs.append(tup[4]['fpr'])
        errors.append(tup[4]['error'])
        payoffs.append(tup[4]['payoff'])
        norms.append(tup[4]['norm'])
    
    print('trainingresults',trainingresults)
    print('precisions',precisions)
    print('recalls',recalls)
    print('f1scores',f1scores)
    print('tprs',tprs)
    print('fprs',fprs)
    print('errors',errors)
    print('payoffs',payoffs)
    print('norms',norms)

    
    
    
    
    
    
#     l = [(1, 0, 1, 0.6558079725675097, {'recall': 0.9788867562380038, 'fpr': 0.1597440844927389, 'f1score': 0.6558079725675097, 'precision': 0.49307122139864645, 'tpr': 0.9788867562380038}, 0), (0, 0, 1, 0.6569626394953906, {'recall': 0.9849660523763336, 'fpr': 0.22784258148915296, 'f1score': 0.6569626394953906, 'precision': 0.49284154331472946, 'tpr': 0.9849660523763336}, 0), (1.3651282317376676, 0.6470588235294118, 0.28193059179174407, 0.6470588235294118, {'recall': 1.0, 'fpr': 0.14109347442680775, 'f1score': 0.6470588235294118, 'precision': 0.4782608695652174, 'tpr': 1.0}, 0), (1.3770177921928193, 0.6589483839845635, 0.28193059179174407, 0.6589483839845635, {'recall': 1.0, 'fpr': 0.13903638151425762, 'f1score': 0.6589483839845635, 'precision': 0.4913669064748201, 'tpr': 1.0}, 1), (1.3670707027532045, 0.6504312531709792, 0.2833605504177745, 0.6504312531709792, {'recall': 1.0, 'fpr': 0.13517755542475965, 'f1score': 0.6504312531709792, 'precision': 0.48195488721804514, 'tpr': 1.0}, 2), (1.334106515817929, 0.6475531389026199, 0.31344662308469085, 0.6475531389026199, {'recall': 1.0, 'fpr': 0.13974911799294396, 'f1score': 0.6475531389026199, 'precision': 0.4788011695906433, 'tpr': 1.0}, 3), (1.3367129605099304, 0.6523855890944499, 0.3156726285845195, 0.6523855890944499, {'recall': 1.0, 'fpr': 0.14013738959764474, 'f1score': 0.6523855890944499, 'precision': 0.4841040462427746, 'tpr': 1.0}, 4), (1.3295978726282573, 0.6608015640273704, 0.331203691399113, 0.6608015640273704, {'recall': 1.0, 'fpr': 0.136560409287682, 'f1score': 0.6608015640273704, 'precision': 0.49343065693430654, 'tpr': 1.0}, 5), (1.3165120446414962, 0.6477157360406092, 0.331203691399113, 0.6477157360406092, {'recall': 1.0, 'fpr': 0.1360517545579298, 'f1score': 0.6477157360406092, 'precision': 0.47897897897897895, 'tpr': 1.0}, 6), (1.3282022491949466, 0.6594059405940594, 0.331203691399113, 0.6594059405940594, {'recall': 1.0, 'fpr': 0.13532651455546812, 'f1score': 0.6594059405940594, 'precision': 0.4918759231905465, 'tpr': 1.0}, 7), (1.3164966405117453, 0.6477003319108582, 0.331203691399113, 0.6477003319108582, {'recall': 1.0, 'fpr': 0.14560062708210855, 'f1score': 0.6477003319108582, 'precision': 0.4789621318373071, 'tpr': 1.0}, 8), (1.323519509394276, 0.656641604010025, 0.33312209461574915, 0.656641604010025, {'recall': 1.0, 'fpr': 0.13463050314465408, 'f1score': 0.656641604010025, 'precision': 0.48880597014925375, 'tpr': 1.0}, 9), (0, 0.656641604010025, 1.6566416040100251, 0.6645489199491741, {'recall': 0.9840075258701787, 'fpr': 0.22742694538688848, 'f1score': 0.6645489199491741, 'precision': 0.5016786570743406, 'tpr': 0.9840075258701787}, 10), (0, 0.656641604010025, 1.6566416040100251, 0.6633472534532605, {'recall': 0.9833333333333333, 'fpr': 0.22549234135667395, 'f1score': 0.6633472534532605, 'precision': 0.5004847309743092, 'tpr': 0.9833333333333333}, 10)]
#     numgens = 10
#     numalphas = 10
#     myepsilon = 0.0001
#     mylambda = 1

def trainplots():
    mylambda1 = 1
    numalphas1 = 10
    precisions1 = [0.5096426545660806, 0.5014014325755216, 0.20039187744923406, 0.20039187744923406]
    recalls1 = [0.586105675146771, 0.5230669265756985, 0.367047308319739, 0.367047308319739]
    f1scores1 = [0.5452063106796117, 0.5120050882493242, 0.25924645696508813, 0.25924645696508813]
    tprs1 = [0.586105675146771, 0.5230669265756985, 0.367047308319739, 0.367047308319739]
    fprs1 = [0.1776248202177933, 0.16467804978399506, 0.4611196712891628, 0.4611196712891628]
    errors1 = [0, 0.47693307342430147, 0.632952691680261, 0.632952691680261]
    payoffs1 = [0, 1.1780682070157824, 1.2807443361825106, 1.2807443361825106]
    norms1 = [0, 0.29886486640851917, 0.3522083554977504, 0.3522083554977504]
        

    mylambda2 = 10
    numalphas2 = 50
    precisions2 = [0.5028702640642939, 0.49523809523809526, 0.11420118343195267, 0.11420118343195267]
    recalls2 = [0.5706840390879478, 0.5084745762711864, 0.18786502271252434, 0.18786502271252434]
    f1scores2 = [0.5346353371986573, 0.5017690575747829, 0.14205103042198233, 0.14205103042198233]
    tprs2 = [0.5706840390879478, 0.5084745762711864, 0.18786502271252434, 0.18786502271252434]
    fprs2 = [0.17800616649537512, 0.16337854500616522, 0.46213212595184194, 0.46213212595184194]
    errors2 = [0, 4.915254237288136, 8.121349772874757, 8.121349772874757]
    payoffs2 = [0, 5.576203915910264, 8.439891588190555, 8.439891588190555]
    norms2 = [0, 0.33905032137787217, 0.6814581846842014, 0.6814581846842014]


    mylambda3 = 20
    numalphas3 = 100
    precisions3 = [0.5175611126720989, 0.49548387096774194, 0.0805012015104703, 0.2182476794204211, 0.1365079365079365, 0.011857707509881422, 0.011857707509881422]
    recalls3 = [0.6, 0.5003257328990228, 0.15124153498871332, 0.31596197967879386, 0.25261096605744127, 0.025440313111545987, 0.025440313111545987]
    f1scores3 = [0.5557399306079348, 0.4978930307941653, 0.1050744931107875, 0.258168184252812, 0.17723837874971377, 0.016175860638739114, 0.016175860638739114]
    tprs3 = [0.6, 0.5003257328990228, 0.15124153498871332, 0.31596197967879386, 0.25261096605744127, 0.025440313111545987, 0.025440313111545987]
    fprs3 = [0.176464542651593, 0.16073997944501542, 0.5523249819569028, 0.3541901733511129, 0.5028759244042728, 0.6677624820217793, 0.6677624820217793]
    errors3 = [0, 9.993485342019543, 16.975169300225733, 13.680760406424124, 14.947780678851174, 19.49119373776908, 19.49119373776908]
    payoffs3 = [0, 10.632242406180278, 17.317661081614002, 14.284966059257641, 15.261417308524516, 19.931919382044768, 19.931919382044768]
    norms3 = [0, 0.3612429358392646, 0.6575082186117314, 0.39579434716648265, 0.6863633703266583, 0.5592743557243125, 0.5592743557243125]


    mylambda4 = 0.5
    numalphas4 = 20
    precisions4 = [0.5039846111569113, 0.49710982658959535, 0.4849693251533742, 0.4425007169486665, 0.4425007169486665]
    recalls4 = [0.6009174311926605, 0.531036724081898, 0.518360655737705, 0.5037544890630101, 0.5037544890630101]
    f1scores4 = [0.5481990733821551, 0.5135135135135135, 0.5011093502377179, 0.47114503816793896, 0.47114503816793896]
    tprs4 = [0.6009174311926605, 0.531036724081898, 0.518360655737705, 0.5037544890630101, 0.5037544890630101]
    fprs4 = [0.18516618793598688, 0.17000925640234496, 0.1722051282051282, 0.19965081647324637, 0.19965081647324637]
    errors4 = [0, 0.23448163795905103, 0.24081967213114752, 0.24812275546849494, 0.24812275546849494]
    payoffs4 = [0, 0.9222687909075138, 0.8541820534283024, 0.8320489630237852, 0.8320489630237852]
    norms4 = [0, 0.3122128470515373, 0.3866376187028451, 0.41607379244470966, 0.41607379244470966]
        

    mylambda5 = 0.2
    numalphas5 = 50
    precisions5 = [0.5138657792567942, 0.49955022488755624, 0.49955022488755624]
    recalls5 = [0.6053577262332571, 0.543733681462141, 0.543733681462141]
    f1scores5 = [0.5558722063896805, 0.5207063603688076, 0.5207063603688076]
    tprs5 = [0.6053577262332571, 0.543733681462141, 0.543733681462141]
    fprs5 = [0.17999794640106787, 0.17142563681183237, 0.17142563681183237]
    errors5 = [0, 0.09125326370757181, 0.09125326370757181]
    payoffs5 = [0, 0.8284613089456938, 0.8284613089456938]
    norms5 = [0, 0.262791954761878, 0.262791954761878]
        

    mylambda6 = 0.01
    numalphas6 = 50
    precisions6 = [0.506166072896684, 0.50210463018641, 0.3905792201938247, 0.4845583693638048, 0.445859872611465, 0.4845583693638048, 0.4845583693638048]
    recalls6 = [0.6018246985988921, 0.539231514368744, 0.5676383884703571, 0.5190208402249421, 0.5, 0.5190208402249421, 0.5190208402249421]
    f1scores6 = [0.549866031557011, 0.5200062276194924, 0.46275033377837116, 0.5011978917105894, 0.4713804713804714, 0.5011978917105894, 0.5011978917105894]
    tprs6 = [0.6018246985988921, 0.539231514368744, 0.5676383884703571, 0.5190208402249421, 0.5, 0.5190208402249421, 0.5190208402249421]
    fprs6 = [0.18518137909772892, 0.17066886529939193, 0.2774186929311583, 0.17070676076506086, 0.19691358024691358, 0.17070676076506086, 0.17070676076506086]
    errors6 = [0, 0.004607684856312561, 0.004323616115296429, 0.004809791597750579, 0.005, 0.004809791597750579, 0.004809791597750579]
    payoffs6 = [0, 0.7672730381542716, 0.7543424797643027, 0.731421660653315, 0.744277083189356, 0.731421660653315, 0.731421660653315]
    norms6 = [0, 0.23733464670204096, 0.24998113635099373, 0.2733881309444355, 0.26072291681064386, 0.2733881309444355, 0.2733881309444355]
        

    mylambda7 = 10
    numalphas7 = 100
    precisions7 = [0.509703196347032, 0.4925187032418953, 0.1289326384867786, 0.20694288913773795, 0.14525241479861492, 0.14525241479861492]
    recalls7 = [0.5846153846153846, 0.5160026126714565, 0.21872953503601833, 0.30166503428011754, 0.2602024159320927, 0.2602024159320927]
    f1scores7 = [0.5445952126848606, 0.5039872408293461, 0.16223436551305404, 0.2454835281615303, 0.1864327485380117, 0.1864327485380117]
    tprs7 = [0.5846153846153846, 0.5160026126714565, 0.21872953503601833, 0.30166503428011754, 0.2602024159320927, 0.2602024159320927]
    fprs7 = [0.1762955361723961, 0.1671801191209694, 0.46306176893084344, 0.3636643730101674, 0.48166786484543495, 0.48166786484543495]
    errors7 = [0, 4.839973873285435, 7.812704649639817, 6.983349657198826, 7.397975840679073, 7.397975840679073]
    payoffs7 = [0, 5.530996766216198, 8.301517026209632, 7.4670826745024055, 7.898058462965916, 7.898058462965916]
    norms7 = [0, 0.30897710706923665, 0.5111876234301835, 0.5162669826964201, 0.4999173777131576, 0.4999173777131576]
        

    mylambda8 = 10
    numalphas8 = 20
    precisions8 = [0.5108571428571429, 0.5010805804260574, 0.239251040221914, 0.2853206412825651, 0.1835229667088074, 0.2853206412825651, 0.2853206412825651]
    recalls8 = [0.5864217776320105, 0.5271191945436831, 0.3384565075212557, 0.3719790986283475, 0.28426892950391647, 0.3719790986283475, 0.3719790986283475]
    f1scores8 = [0.5460375629867156, 0.5137701804368471, 0.2803358613217768, 0.3229373405160193, 0.22304737516005121, 0.3229373405160193, 0.3229373405160193]
    tprs8 = [0.5864217776320105, 0.5271191945436831, 0.3384565075212557, 0.3719790986283475, 0.28426892950391647, 0.3719790986283475, 0.3719790986283475]
    fprs8 = [0.1755717362321813, 0.16623804135377018, 0.33781564360500926, 0.2929759704251386, 0.39800739523418244, 0.2929759704251386, 0.2929759704251386]
    errors8 = [0, 4.728808054563169, 6.615434924787442, 6.280209013716524, 7.157310704960835, 6.280209013716524, 6.280209013716524]
    payoffs8 = [0, 5.4084124530589985, 7.056313129027419, 6.66867472800063, 7.622312829417546, 6.66867472800063, 6.66867472800063]
    norms8 = [0, 0.32039560150417046, 0.5591217957600225, 0.6115342857158943, 0.5349978755432891, 0.6115342857158943, 0.6115342857158943]
        

    mylambda9 = 10
    numalphas9 = 10
    precisions9 = [0.5169274537695591, 0.49111675126903553, 0.4909993792675357, 0.2895543503890592, 0.4935185185185185, 0.34550709406200736, 0.34550709406200736]
    recalls9 = [0.5872656755009696, 0.5063788027477919, 0.517500817795224, 0.40235910878112713, 0.5220372184133203, 0.4297385620915033, 0.4297385620915033]
    f1scores9 = [0.5498562566197609, 0.4986310194878402, 0.5039018952062431, 0.3367612779377485, 0.5073774393146121, 0.3830468977570638, 0.3830468977570638]
    tprs9 = [0.5872656755009696, 0.5063788027477919, 0.517500817795224, 0.40235910878112713, 0.5220372184133203, 0.4297385620915033, 0.4297385620915033]
    fprs9 = [0.17494333402019369, 0.16463101714051115, 0.16832597762496151, 0.3090890439064424, 0.16853240217726198, 0.2557494866529774, 0.2557494866529774]
    errors9 = [0, 4.936211972522081, 4.8249918220477594, 5.976408912188729, 4.779627815866797, 5.702614379084967, 5.702614379084967]
    payoffs9 = [0, 5.613622059272161, 5.41478418963845, 6.391601202706889, 5.210716244515645, 6.057424570435412, 6.057424570435412]
    norms9 = [0, 0.3225899132499199, 0.4102076324093096, 0.58480770948184, 0.5689115713511521, 0.6451898086495547, 0.6451898086495547]
        

    mylambda10 = 10
    numalphas10 = 10
    precisions10 = [0.5124555160142349, 0.4915764139590854, 0.5026946107784431, 0.30875931158489595, 0.45721054190109567, 0.04330708661417323, 0.04330708661417323]
    recalls10 = [0.6139717940308298, 0.5353866317169069, 0.5426632191338073, 0.39306736429038586, 0.5022771633051398, 0.08986928104575163, 0.08986928104575163]
    f1scores10 = [0.55863921217547, 0.5125470514429109, 0.5219148274790177, 0.3458495180549561, 0.4786854751201364, 0.05844845908607864, 0.05844845908607864]
    tprs10 = [0.6139717940308298, 0.5353866317169069, 0.5426632191338073, 0.39306736429038586, 0.5022771633051398, 0.08986928104575163, 0.08986928104575163]
    fprs10 = [0.18264793354527742, 0.17336889618383258, 0.17113125901504225, 0.2762266475056457, 0.18846391116594693, 0.6237166324435318, 0.6237166324435318]
    errors10 = [0, 0.23230668414154654, 0.22866839043309634, 0.30346631785480704, 0.24886141834743009, 0.4550653594771242, 0.4550653594771242]
    payoffs10 = [0, 1.004525986978824, 0.9979098447629909, 0.9976697759933637, 0.9982853407607597, 1.053429735573995, 1.053429735573995]
    norms10 = [0, 0.22778069716272253, 0.23075854567010545, 0.30579654186144345, 0.25057607758667033, 0.4016356239031291, 0.4016356239031291]

    mylambda11 = 1
    numalphas11 = 10
    precisions11 = [0.5126791620727673, 0.5029154518950437, 0.4959617110379898, 0.4959617110379898]
    recalls11 = [0.6066536203522505, 0.5653883972468043, 0.5397135416666666, 0.5397135416666666]
    f1scores11 = [0.5557215416791156, 0.5323252584477705, 0.5169134840218238, 0.5169134840218238]
    tprs11 = [0.6066536203522505, 0.5653883972468043, 0.5397135416666666, 0.5397135416666666]
    fprs11 = [0.181631395109924, 0.17488973228023388, 0.17321134868421054, 0.17321134868421054]
    errors11 = [0, 0.43461160275319566, 0.46028645833333337, 0.46028645833333337]
    payoffs11 = [0, 1.179715160662358, 1.1363456471017066, 1.1363456471017066]
    norms11 = [0, 0.2548964420908377, 0.3239408112316269, 0.3239408112316269]
    
    iterationnum = range(0,11)
    colormap = plt.cm.gist_ncar
    colors = [colormap(i) for i in np.linspace(0, 1,20)]

    plt.gca().set_color_cycle([colormap(i) for i in np.linspace(0, 0.9, 11)])
    
#     plt.plot(iterationnum[0:len(precisions1)],precisions1, label=str(mylambda1)+','+str(numalphas1), linestyle='-', marker='o', linewidth=2)
#     plt.plot(iterationnum[0:len(precisions2)],precisions2, label=str(mylambda2)+','+str(numalphas2), linestyle='-', marker='v', linewidth=2)
#     plt.plot(iterationnum[0:len(precisions3)],precisions3, label=str(mylambda3)+','+str(numalphas3), linestyle='-', marker='^', linewidth=2)
#     plt.plot(iterationnum[0:len(precisions4)],precisions4, label=str(mylambda4)+','+str(numalphas4), linestyle='-', marker='<', linewidth=2)
#     plt.plot(iterationnum[0:len(precisions5)],precisions5, label=str(mylambda5)+','+str(numalphas5), linestyle='-', marker='>', linewidth=2)
#     plt.plot(iterationnum[0:len(precisions6)],precisions6, label=str(mylambda6)+','+str(numalphas6), linestyle='-', marker='s', linewidth=2)
#     plt.plot(iterationnum[0:len(precisions7)],precisions7, label=str(mylambda7)+','+str(numalphas7), linestyle='-', marker='p', linewidth=2)
#     plt.plot(iterationnum[0:len(precisions8)],precisions8, label=str(mylambda8)+','+str(numalphas8), linestyle='-', marker='H', linewidth=2)
#     plt.plot(iterationnum[0:len(precisions9)],precisions9, label=str(mylambda9)+','+str(numalphas9), linestyle='-', marker='d', linewidth=2)
#     plt.plot(iterationnum[0:len(precisions10)],precisions10, label=str(mylambda10)+','+str(numalphas10), linestyle='-', marker='x', linewidth=2)
#     plt.plot(iterationnum[0:len(precisions11)],precisions11, label=str(mylambda11)+','+str(numalphas11), linestyle='-', marker='D', linewidth=2)
#     title('Training Precisions')
#     xlabel('Iteration')
#     ylabel('Precision')
# #     legend = plt.legend(loc='upper center', shadow=True)
# #     plt.legend(loc=2)
# #     legend.get_frame().set_facecolor('#00FFCC')
#     ax = plt.subplot(111)
#     box = ax.get_position()
#     ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
#     ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
# #     plt.legend()
#     plt.grid()
#     savefig("/home/aneesh/Documents/IJCNN Paper/IJCNN/images/TrainingPrecisions.png", dpi=300)
# #     plt.show()
  
#     plt.plot(iterationnum[0:len(recalls1)],recalls1, label=str(mylambda1)+','+str(numalphas1), linestyle='-', marker='o', linewidth=2)
#     plt.plot(iterationnum[0:len(recalls2)],recalls2, label=str(mylambda2)+','+str(numalphas2), linestyle='-', marker='v', linewidth=2)
#     plt.plot(iterationnum[0:len(recalls3)],recalls3, label=str(mylambda3)+','+str(numalphas3), linestyle='-', marker='^', linewidth=2)
#     plt.plot(iterationnum[0:len(recalls4)],recalls4, label=str(mylambda4)+','+str(numalphas4), linestyle='-', marker='<', linewidth=2)
#     plt.plot(iterationnum[0:len(recalls5)],recalls5, label=str(mylambda5)+','+str(numalphas5), linestyle='-', marker='>', linewidth=2)
#     plt.plot(iterationnum[0:len(recalls6)],recalls6, label=str(mylambda6)+','+str(numalphas6), linestyle='-', marker='s', linewidth=2)
#     plt.plot(iterationnum[0:len(recalls7)],recalls7, label=str(mylambda7)+','+str(numalphas7), linestyle='-', marker='p', linewidth=2)
#     plt.plot(iterationnum[0:len(recalls8)],recalls8, label=str(mylambda8)+','+str(numalphas8), linestyle='-', marker='H', linewidth=2)
#     plt.plot(iterationnum[0:len(recalls9)],recalls9, label=str(mylambda9)+','+str(numalphas9), linestyle='-', marker='d', linewidth=2)
#     plt.plot(iterationnum[0:len(recalls10)],recalls10, label=str(mylambda10)+','+str(numalphas10), linestyle='-', marker='x', linewidth=2)
#     plt.plot(iterationnum[0:len(recalls11)],recalls11, label=str(mylambda11)+','+str(numalphas11), linestyle='-', marker='D', linewidth=2)
#     title('Training Recalls')
#     xlabel('Iteration')
#     ylabel('Recall')
#     ax = plt.subplot(111)
#     box = ax.get_position()
#     ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
#     ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
# #     plt.legend()
#     plt.grid()
#     savefig("/home/aneesh/Documents/IJCNN Paper/IJCNN/images/TrainingRecalls.png", dpi=300)
# #     plt.show()
#       
    plt.plot(iterationnum[0:len(f1scores1)],f1scores1, label=str(mylambda1)+','+str(numalphas1), linestyle='-', marker='o', linewidth=2)
    plt.plot(iterationnum[0:len(f1scores2)],f1scores2, label=str(mylambda2)+','+str(numalphas2), linestyle='-', marker='v', linewidth=2)
    plt.plot(iterationnum[0:len(f1scores3)],f1scores3, label=str(mylambda3)+','+str(numalphas3), linestyle='-', marker='^', linewidth=2)
    plt.plot(iterationnum[0:len(f1scores4)],f1scores4, label=str(mylambda4)+','+str(numalphas4), linestyle='-', marker='<', linewidth=2)
    plt.plot(iterationnum[0:len(f1scores5)],f1scores5, label=str(mylambda5)+','+str(numalphas5), linestyle='-', marker='>', linewidth=2)
    plt.plot(iterationnum[0:len(f1scores6)],f1scores6, label=str(mylambda6)+','+str(numalphas6), linestyle='-', marker='s', linewidth=2)
    plt.plot(iterationnum[0:len(f1scores7)],f1scores7, label=str(mylambda7)+','+str(numalphas7), linestyle='-', marker='p', linewidth=2)
    plt.plot(iterationnum[0:len(f1scores8)],f1scores8, label=str(mylambda8)+','+str(numalphas8), linestyle='-', marker='H', linewidth=2)
    plt.plot(iterationnum[0:len(f1scores9)],f1scores9, label=str(mylambda9)+','+str(numalphas9), linestyle='-', marker='d', linewidth=2)
    plt.plot(iterationnum[0:len(f1scores10)],f1scores10, label=str(mylambda10)+','+str(numalphas10), linestyle='-', marker='x', linewidth=2)
    plt.plot(iterationnum[0:len(f1scores11)],f1scores11, label=str(mylambda11)+','+str(numalphas11), linestyle='-', marker='D', linewidth=2)
    title('Training F1Scores')
    xlabel('Iteration')
    ylabel('F1Score')

    ax = plt.subplot(111)
    box = ax.get_position()
    ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
    ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
#     plt.legend()
    plt.grid()
    savefig("/home/aneesh/Documents/IJCNN Paper/IJCNN/images/TrainingF1Scores.png", dpi=300)
#     plt.show()
   
#     plt.plot(iterationnum[0:len(tprs1)],tprs1, label=str(mylambda1)+','+str(numalphas1), linestyle='-', marker='o', linewidth=2)
#     plt.plot(iterationnum[0:len(tprs2)],tprs2, label=str(mylambda2)+','+str(numalphas2), linestyle='-', marker='v', linewidth=2)
#     plt.plot(iterationnum[0:len(tprs3)],tprs3, label=str(mylambda3)+','+str(numalphas3), linestyle='-', marker='^', linewidth=2)
#     plt.plot(iterationnum[0:len(tprs4)],tprs4, label=str(mylambda4)+','+str(numalphas4), linestyle='-', marker='<', linewidth=2)
#     plt.plot(iterationnum[0:len(tprs5)],tprs5, label=str(mylambda5)+','+str(numalphas5), linestyle='-', marker='>', linewidth=2)
#     plt.plot(iterationnum[0:len(tprs6)],tprs6, label=str(mylambda6)+','+str(numalphas6), linestyle='-', marker='s', linewidth=2)
#     plt.plot(iterationnum[0:len(tprs7)],tprs7, label=str(mylambda7)+','+str(numalphas7), linestyle='-', marker='p', linewidth=2)
#     plt.plot(iterationnum[0:len(tprs8)],tprs8, label=str(mylambda8)+','+str(numalphas8), linestyle='-', marker='H', linewidth=2)
#     plt.plot(iterationnum[0:len(tprs9)],tprs9, label=str(mylambda9)+','+str(numalphas9), linestyle='-', marker='d', linewidth=2)
#     plt.plot(iterationnum[0:len(tprs10)],tprs10, label=str(mylambda10)+','+str(numalphas10), linestyle='-', marker='x', linewidth=2)
#     plt.plot(iterationnum[0:len(tprs11)],tprs11, label=str(mylambda11)+','+str(numalphas11), linestyle='-', marker='D', linewidth=2)
#     title('Training TPRs')
#     xlabel('Iteration')
#     ylabel('TPR')
#     ax = plt.subplot(111)
#     box = ax.get_position()
#     ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
#     ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
# #     plt.legend()
#     plt.grid()
#     savefig("/home/aneesh/Documents/IJCNN Paper/IJCNN/images/TrainingTPRs.png", dpi=300)
# #     plt.show()
#   
#    
#     plt.plot(iterationnum[0:len(fprs1)],fprs1, label=str(mylambda1)+','+str(numalphas1), linestyle='-', marker='o', linewidth=2)
#     plt.plot(iterationnum[0:len(fprs2)],fprs2, label=str(mylambda2)+','+str(numalphas2), linestyle='-', marker='v', linewidth=2)
#     plt.plot(iterationnum[0:len(fprs3)],fprs3, label=str(mylambda3)+','+str(numalphas3), linestyle='-', marker='^', linewidth=2)
#     plt.plot(iterationnum[0:len(fprs4)],fprs4, label=str(mylambda4)+','+str(numalphas4), linestyle='-', marker='<', linewidth=2)
#     plt.plot(iterationnum[0:len(fprs5)],fprs5, label=str(mylambda5)+','+str(numalphas5), linestyle='-', marker='>', linewidth=2)
#     plt.plot(iterationnum[0:len(fprs6)],fprs6, label=str(mylambda6)+','+str(numalphas6), linestyle='-', marker='s', linewidth=2)
#     plt.plot(iterationnum[0:len(fprs7)],fprs7, label=str(mylambda7)+','+str(numalphas7), linestyle='-', marker='p', linewidth=2)
#     plt.plot(iterationnum[0:len(fprs8)],fprs8, label=str(mylambda8)+','+str(numalphas8), linestyle='-', marker='H', linewidth=2)
#     plt.plot(iterationnum[0:len(fprs9)],fprs9, label=str(mylambda9)+','+str(numalphas9), linestyle='-', marker='d', linewidth=2)
#     plt.plot(iterationnum[0:len(fprs10)],fprs10, label=str(mylambda10)+','+str(numalphas10), linestyle='-', marker='x', linewidth=2)
#     plt.plot(iterationnum[0:len(fprs11)],fprs11, label=str(mylambda11)+','+str(numalphas11), linestyle='-', marker='D', linewidth=2)
#     title('Training FPRs')
#     xlabel('Iteration')
#     ylabel('FPR')
#     ax = plt.subplot(111)
#     box = ax.get_position()
#     ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
#     ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
# #     plt.legend()
#     plt.grid()
#     savefig("/home/aneesh/Documents/IJCNN Paper/IJCNN/images/TrainingFPRs.png", dpi=300)
# #     plt.show()
#   
#   
#     plt.plot(iterationnum[0:len(errors1)],errors1, label=str(mylambda1)+','+str(numalphas1), linestyle='-', marker='o', linewidth=2)
#     plt.plot(iterationnum[0:len(errors2)],errors2, label=str(mylambda2)+','+str(numalphas2), linestyle='-', marker='v', linewidth=2)
#     plt.plot(iterationnum[0:len(errors3)],errors3, label=str(mylambda3)+','+str(numalphas3), linestyle='-', marker='^', linewidth=2)
#     plt.plot(iterationnum[0:len(errors4)],errors4, label=str(mylambda4)+','+str(numalphas4), linestyle='-', marker='<', linewidth=2)
#     plt.plot(iterationnum[0:len(errors5)],errors5, label=str(mylambda5)+','+str(numalphas5), linestyle='-', marker='>', linewidth=2)
#     plt.plot(iterationnum[0:len(errors6)],errors6, label=str(mylambda6)+','+str(numalphas6), linestyle='-', marker='s', linewidth=2)
#     plt.plot(iterationnum[0:len(errors7)],errors7, label=str(mylambda7)+','+str(numalphas7), linestyle='-', marker='p', linewidth=2)
#     plt.plot(iterationnum[0:len(errors8)],errors8, label=str(mylambda8)+','+str(numalphas8), linestyle='-', marker='H', linewidth=2)
#     plt.plot(iterationnum[0:len(errors9)],errors9, label=str(mylambda9)+','+str(numalphas9), linestyle='-', marker='d', linewidth=2)
#     plt.plot(iterationnum[0:len(errors10)],errors10, label=str(mylambda10)+','+str(numalphas10), linestyle='-', marker='x', linewidth=2)
#     plt.plot(iterationnum[0:len(errors11)],errors11, label=str(mylambda11)+','+str(numalphas11), linestyle='-', marker='D', linewidth=2)
#     title('Training Errors')
#     xlabel('Iteration')
#     ylabel('Error')
#     ax = plt.subplot(111)
#     box = ax.get_position()
#     ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
#     ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
# #     plt.legend()
#     plt.grid()
#     savefig("/home/aneesh/Documents/IJCNN Paper/IJCNN/images/TrainingErrors.png", dpi=300)
# #     plt.show()

#     plt.gca().set_color_cycle([colormap(i) for i in np.linspace(0, 0.9, 15)])
#   
#     plt.plot(iterationnum[0:len(payoffs1)],payoffs1, label=str(mylambda1)+','+str(numalphas1), linestyle='-', marker='o', linewidth=2)    
#     plt.plot(iterationnum[0:len(payoffs2)],payoffs2, label=str(mylambda2)+','+str(numalphas2), linestyle='-', marker='v', linewidth=2)
#     plt.plot(iterationnum[0:len(payoffs3)],payoffs3, label=str(mylambda3)+','+str(numalphas3), linestyle='-', marker='^', linewidth=2)
#     plt.plot(iterationnum[0:len(payoffs4)],payoffs4, label=str(mylambda4)+','+str(numalphas4), linestyle='-', marker='<', linewidth=2)
#     plt.plot(iterationnum[0:len(payoffs5)],payoffs5, label=str(mylambda5)+','+str(numalphas5), linestyle='-', marker='>', linewidth=2)
#     plt.plot(iterationnum[0:len(payoffs6)],payoffs6, label=str(mylambda6)+','+str(numalphas6), linestyle='-', marker='s', linewidth=2)
#     plt.plot(iterationnum[0:len(payoffs7)],payoffs7, label=str(mylambda7)+','+str(numalphas7), linestyle='-', marker='p', linewidth=2)
#     plt.plot(iterationnum[0:len(payoffs8)],payoffs8, label=str(mylambda8)+','+str(numalphas8), linestyle='-', marker='H', linewidth=2)
#     plt.plot(iterationnum[0:len(payoffs9)],payoffs9, label=str(mylambda9)+','+str(numalphas9), linestyle='-', marker='d', linewidth=2)
#     plt.plot(iterationnum[0:len(payoffs10)],payoffs10, label=str(mylambda10)+','+str(numalphas10), linestyle='-', marker='x', linewidth=2)
#     plt.plot(iterationnum[0:len(payoffs11)],payoffs11, label=str(mylambda11)+','+str(numalphas11), linestyle='-', marker='D', linewidth=2)
#     title('Training Payoffs')
#     xlabel('Iteration')
#     ylabel('Payoff')
#     ax = plt.subplot(111)
#     box = ax.get_position()
#     ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
#     ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
# #     plt.legend()
#     plt.grid()
#     savefig("/home/aneesh/Documents/IJCNN Paper/IJCNN/images/TrainingPayoffs.png", dpi=300)
# #     plt.show()
  
  
#     plt.plot(iterationnum[0:len(norms1)],norms1, label=str(mylambda1)+','+str(numalphas1), linestyle='-', marker='o', linewidth=2)
#     plt.plot(iterationnum[0:len(norms2)],norms2, label=str(mylambda2)+','+str(numalphas2), linestyle='-', marker='v', linewidth=2)
#     plt.plot(iterationnum[0:len(norms3)],norms3, label=str(mylambda3)+','+str(numalphas3), linestyle='-', marker='^', linewidth=2)
#     plt.plot(iterationnum[0:len(norms4)],norms4, label=str(mylambda4)+','+str(numalphas4), linestyle='-', marker='<', linewidth=2)
#     plt.plot(iterationnum[0:len(norms5)],norms5, label=str(mylambda5)+','+str(numalphas5), linestyle='-', marker='>', linewidth=2)
#     plt.plot(iterationnum[0:len(norms6)],norms6, label=str(mylambda6)+','+str(numalphas6), linestyle='-', marker='s', linewidth=2)
#     plt.plot(iterationnum[0:len(norms7)],norms7, label=str(mylambda7)+','+str(numalphas7), linestyle='-', marker='p', linewidth=2)
#     plt.plot(iterationnum[0:len(norms8)],norms8, label=str(mylambda8)+','+str(numalphas8), linestyle='-', marker='H', linewidth=2)
#     plt.plot(iterationnum[0:len(norms9)],norms9, label=str(mylambda9)+','+str(numalphas9), linestyle='-', marker='d', linewidth=2)
#     plt.plot(iterationnum[0:len(norms10)],norms10, label=str(mylambda10)+','+str(numalphas10), linestyle='-', marker='x', linewidth=2)
#     plt.plot(iterationnum[0:len(norms11)],norms11, label=str(mylambda11)+','+str(numalphas11), linestyle='-', marker='D', linewidth=2)
#     title('Training Norms')
#     xlabel('Iteration')
#     ylabel('Norm')
#     ax = plt.subplot(111)
#     box = ax.get_position()
#     ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
#     ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
# #     plt.legend()
#     plt.grid()
#     savefig("/home/aneesh/Documents/IJCNN Paper/IJCNN/images/TrainingNorms.png", dpi=300)
# #     plt.show()


    print('Successfully saved all plots one at a time')






        
def gaplots():
#     mutationx1 = []
#     mutationy1 = []
#         
#     mutationx1.append(5)
#     mutationy1.append(0.3571)
#    
#     mutationx1.append(10)
#     mutationy1.append(0.2625)
#     
#     mutationx1.append(20)
#     mutationy1.append(0.2815)
#     
#     mutationx1.append(30)
#     mutationy1.append(0.2165)
#     
#     mutationx1.append(40)
#     mutationy1.append(0.2534)
#     
#     mutationx1.append(50)
#     mutationy1.append(0.2607)
#     
#     mutationx1.append(60)
#     mutationy1.append(0.4142)
#     
#     mutationx1.append(70)
#     mutationy1.append(0.3376)
#     
#     mutationx1.append(80)
#     mutationy1.append(0.4153)
# #     mutationx1.append(80)
# #     mutationy1.append(0.6241)
#     
#     mutationx1.append(90)
#     mutationy1.append(0.4951)
#     
#     mutationx1.append(100)
#     mutationy1.append(0.4541)
#     
#     mutationx1.append(200)
#     mutationy1.append(0.4123)
#     
#   
#     mutationx2 = []
#     mutationy2 = []
#     mutationx2.append(5)
#     mutationy2.append(0.2551)
#   
#     mutationx2.append(10)
#     mutationy2.append(0.3948)
#   
#     mutationx2.append(20)
#     mutationy2.append(0.3583)
#   
#     mutationx2.append(30)
#     mutationy2.append(0.2614)
#   
#     mutationx2.append(40)
#     mutationy2.append(0.2366)
#   
#     mutationx2.append(50)
#     mutationy2.append(0.2145)
#   
#     mutationx2.append(60)
#     mutationy2.append(0.5632)
#   
#     mutationx2.append(70)
#     mutationy2.append(0.2684)
#   
#     mutationx2.append(80)
#     mutationy2.append(0.2302)
#   
#     mutationx2.append(90)
#     mutationy2.append(0.618)
#   
#     mutationx2.append(100)
#     mutationy2.append(0.616)
#    
#     mutationx2.append(200)
#     mutationy2.append(0.296)
#   
#     mutationx3 = []
#     mutationy3 = []
#       
#     mutationx3.append(5)
#     mutationy3.append(0.3809)
#   
#     mutationx3.append(10)
#     mutationy3.append(0.3279)
#   
#     mutationx3.append(20)
#     mutationy3.append(0.308)
#   
#     mutationx3.append(30)
#     mutationy3.append(0.4022)
#   
#     mutationx3.append(40)
#     mutationy3.append(0.2397)
#   
#     mutationx3.append(50)
#     mutationy3.append(0.2502)
#   
#     mutationx3.append(60)
#     mutationy3.append(0.3692)
#    
#     mutationx3.append(70)
#     mutationy3.append(0.4666)
#    
#     mutationx3.append(80)
#     mutationy3.append(0.5171)
#    
#     mutationx3.append(90)
#     mutationy3.append(0.3482)
#    
#     mutationx3.append(100)
#     mutationy3.append(0.2292)
#    
#     mutationx3.append(200)
#     mutationy3.append(0.2000)
#       
#          
#     plt.plot(mutationx1,mutationy1, label=str(10), linestyle='-', marker='o', linewidth=2)
#     plt.plot(mutationx2,mutationy2, label=str(1), linestyle='-', marker='v', linewidth=2)
#     plt.plot(mutationx3,mutationy3, label=str(0.1), linestyle='-', marker='^', linewidth=2)
#     title('Parameter Tuning : Mutation Operation')
#     xlabel('Upper Bound for Mutation')
#     ylabel('Manipulated testing f1score on manipulated training data')
#     ax = plt.subplot(111)
#     box = ax.get_position()
#     ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
#     ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
# #     plt.legend()
#     plt.grid()
#     savefig("/home/aneesh/Documents/IJCNN Paper/IJCNN/images/MutationParams.png", dpi=300)





#     crossoverx1 = []
#     crossovery1 = []
#   
#     crossoverx1.append(2)
#     crossovery1.append(0.2607)
#   
#     crossoverx1.append(3)
#     crossovery1.append(0.6202)
#   
#     crossoverx1.append(4)
#     crossovery1.append(0.2084)
#   
#     crossoverx1.append(5)
#     crossovery1.append(0.241)
#   
#     crossoverx1.append(6)
#     crossovery1.append(0.2735)
#   
#     crossoverx1.append(7)
#     crossovery1.append(0.2489)
#   
#     crossoverx1.append(8)
#     crossovery1.append(0.5463)
# 
#     crossoverx1.append(9)
#     crossovery1.append(0.6222)
# 
# 
#     crossoverx2 = []
#     crossovery2 = []
#   
#     crossoverx2.append(2)
#     crossovery2.append(0.2844)
#   
#     crossoverx2.append(3)
#     crossovery2.append(0.3393)
#   
#     crossoverx2.append(4)
#     crossovery2.append(0.3293)
#   
#     crossoverx2.append(5)
#     crossovery2.append(0.2538)
#   
#     crossoverx2.append(6)
#     crossovery2.append(0.2549)
#   
#     crossoverx2.append(7)
#     crossovery2.append(0.2813)
#   
#     crossoverx2.append(8)
#     crossovery2.append(0.2377)
# 
#     crossoverx2.append(9)
#     crossovery2.append(0.5541)
# 
# 
# 
#     crossoverx3 = []
#     crossovery3 = []
#   
#     crossoverx3.append(2)
#     crossovery3.append(0.4352)
#   
#     crossoverx3.append(3)
#     crossovery3.append(0.339)
#   
#     crossoverx3.append(4)
#     crossovery3.append(0.3997)
#   
#     crossoverx3.append(5)
#     crossovery3.append(0.297)
#   
#     crossoverx3.append(6)
#     crossovery3.append(0.2066)
#   
#     crossoverx3.append(7)
#     crossovery3.append(0.3037)
#   
#     crossoverx3.append(8)
#     crossovery3.append(0.361)
# 
#     crossoverx3.append(9)
#     crossovery3.append(0.5067)
#  
#     plt.plot(crossoverx1,crossovery1, label=str(10), linestyle='-', marker='<', linewidth=2)
#     plt.plot(crossoverx2,crossovery2, label=str(1), linestyle='-', marker='>', linewidth=2)
#     plt.plot(crossoverx3,crossovery3, label=str(0.1), linestyle='-', marker='s', linewidth=2)
# 
#     title('Parameter Tuning : Crossover Operation')
#     xlabel('Minimum width for Crossover')
#     ylabel('Manipulated testing f1score on manipulated training data')
#     ax = plt.subplot(111)
#     box = ax.get_position()
#     ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
#     ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
# #     plt.legend()
#     plt.grid()
#     savefig("/home/aneesh/Documents/IJCNN Paper/IJCNN/images/CrossoverParams.png", dpi=300)




 
    selectionx1 = []
    selectiony1 = []
    
    selectionx1.append(20)
    selectiony1.append(0.32)
    
    selectionx1.append(30)
    selectiony1.append(0.5542)
        
    selectionx1.append(40)
    selectiony1.append(0.2459)
  
    selectionx1.append(50)
    selectiony1.append(0.2607)
    
    selectionx1.append(60)
    selectiony1.append(0.5016)
    
    selectionx1.append(70)
    selectiony1.append(0.4137)
    
    selectionx1.append(80)
    selectiony1.append(0.2806)
 
 
 
 
 
    selectionx2 = []
    selectiony2 = []
    
    selectionx2.append(20)
    selectiony2.append(0.3048)
    
    selectionx2.append(30)
    selectiony2.append(0.2981)
        
    selectionx2.append(40)
    selectiony2.append(0.2724)
  
    selectionx2.append(50)
    selectiony2.append(0.3293)
    
    selectionx2.append(60)
    selectiony2.append(0.2609)
    
    selectionx2.append(70)
    selectiony2.append(0.6294)
    
    selectionx2.append(80)
    selectiony2.append(0.4988)
 
 
 
 
 
 
 
 
 
    selectionx3 = []
    selectiony3 = []
    
    selectionx3.append(20)
    selectiony3.append(0.4722)
    
    selectionx3.append(30)
    selectiony3.append(0.3063)
        
    selectionx3.append(40)
    selectiony3.append(0.261)
  
    selectionx3.append(50)
    selectiony3.append(0.2502)
    
    selectionx3.append(60)
    selectiony3.append(0.3142)
    
    selectionx3.append(70)
    selectiony3.append(0.2541)
    
    selectionx3.append(80)
    selectiony3.append(0.2806)
 
 
   
    plt.plot(selectionx1,selectiony1, label=str(10), linestyle='-', marker='p', linewidth=2)
    plt.plot(selectionx2,selectiony2, label=str(1), linestyle='-', marker='H', linewidth=2)
    plt.plot(selectionx3,selectiony3, label=str(0.1), linestyle='-', marker='d', linewidth=2)
    title('Parameter Tuning : Selection Operation')
    xlabel('Percentage offspring size for Selection')
    ylabel('Manipulated testing f1score on manipulated training data')
    ax = plt.subplot(111)
    box = ax.get_position()
    ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
    ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
#     plt.legend()
    plt.grid()
    savefig("/home/aneesh/Documents/IJCNN Paper/IJCNN/images/SelectionParams.png", dpi=300)


    print('Successfully saved all plots one at a time')

def ttest():
    records = []
#     record = {'testing error on original training data and original testing data': {'recall': 0.8410206084396468, 'error': 0, 'precision': 0.49394812680115274, 'tpr': 0.8410206084396468, 'fpr': 0.07452678040913335, 'f1score': 0.6223674655047204, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8500486854917235, 'error': 0.5251798561151079, 'precision': 0.4980034227039361, 'tpr': 0.8500486854917235, 'fpr': 0.07474730315127835, 'f1score': 0.6280575539568345, 'norm': 1.5251798561151078, 'payoff': 0}, 'training error on original training data and original testing data': {'recall': 0.5127952755905512, 'error': 0, 'precision': 0.48935504070131497, 'tpr': 0.5127952755905512, 'fpr': 0.16724774405250206, 'f1score': 0.5008010253123999, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8516377649325626, 'error': 0.5251798561151079, 'precision': 0.5042783799201369, 'tpr': 0.8516377649325626, 'fpr': 0.07388199285835742, 'f1score': 0.6334647079899678, 'norm': 1.5251798561151078, 'payoff': 0}}
#     records.append(record)
#     record = {'testing error on original training data and original testing data': {'recall': 0.8458536585365853, 'error': 0, 'precision': 0.49798966111430215, 'tpr': 0.8458536585365853, 'fpr': 0.07422505307855626, 'f1score': 0.6268980477223427, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8504950495049505, 'error': 0.5228758169934641, 'precision': 0.4891799544419134, 'tpr': 0.8504950495049505, 'fpr': 0.07608142493638677, 'f1score': 0.6211135213304411, 'norm': 1.522875816993464, 'payoff': 0}, 'training error on original training data and original testing data': {'recall': 0.5135842880523731, 'error': 0, 'precision': 0.49154135338345867, 'tpr': 0.5135842880523731, 'fpr': 0.16654694715238583, 'f1score': 0.5023211141347848, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8533724340175953, 'error': 0.5228758169934641, 'precision': 0.496304718590108, 'tpr': 0.8533724340175953, 'fpr': 0.07523138320455125, 'f1score': 0.6276060388209921, 'norm': 1.522875816993464, 'payoff': 0}}
#     records.append(record)
#     record = {'testing error on original training data and original testing data': {'recall': 0.8481012658227848, 'error': 0, 'precision': 0.4994266055045872, 'tpr': 0.8481012658227848, 'fpr': 0.07415272233075682, 'f1score': 0.6286539155539517, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8475247524752475, 'error': 0.05024082993701371, 'precision': 0.4885844748858447, 'tpr': 0.8475247524752475, 'fpr': 0.07599660729431722, 'f1score': 0.6198406951484432, 'norm': 1.0502408299370136, 'payoff': 0}, 'training error on original training data and original testing data': {'recall': 0.5238558909444986, 'error': 0, 'precision': 0.4996904024767802, 'tpr': 0.5238558909444986, 'fpr': 0.1662722502315053, 'f1score': 0.5114878783077167, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.860078277886497, 'error': 0.05024082993701371, 'precision': 0.4957698815566836, 'tpr': 0.860078277886497, 'fpr': 0.07590422822210902, 'f1score': 0.6289803220035778, 'norm': 1.0502408299370136, 'payoff': 0}}
#     records.append(record)
#     record = {'testing error on original training data and original testing data': {'recall': 0.8504854368932039, 'error': 0, 'precision': 0.4997147746719909, 'tpr': 0.8504854368932039, 'fpr': 0.07451146983857264, 'f1score': 0.6295364714337046, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8414872798434442, 'error': 0.5305826999638075, 'precision': 0.49596309111880044, 'tpr': 0.8414872798434442, 'fpr': 0.07420614705382918, 'f1score': 0.6240928882438317, 'norm': 1.5305826999638075, 'payoff': 0}, 'training error on original training data and original testing data': {'recall': 0.5158781594296824, 'error': 0, 'precision': 0.500943989930774, 'tpr': 0.5158781594296824, 'fpr': 0.16326950792670372, 'f1score': 0.508301404853129, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8553519768563163, 'error': 0.5305826999638075, 'precision': 0.5048377916903813, 'tpr': 0.8553519768563163, 'fpr': 0.07396072430502423, 'f1score': 0.6349319971367215, 'norm': 1.5305826999638075, 'payoff': 0}}
#     records.append(record)
#     record = {'testing error on original training data and original testing data': {'recall': 0.8013500482160077, 'error': 0, 'precision': 0.35182049110922947, 'tpr': 0.8013500482160077, 'fpr': 0.13015387231148517, 'f1score': 0.4889673433362754, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8488714425907753, 'error': 2.6067961165048543, 'precision': 0.46380697050938335, 'tpr': 0.8488714425907753, 'fpr': 0.08488243782361429, 'f1score': 0.5998613037447988, 'norm': 0.24321273478208738, 'payoff': 3.363583381722767}, 'training error on original training data and original testing data': {'recall': 0.5856910569105691, 'error': 0, 'precision': 0.5084697910784868, 'tpr': 0.5856910569105691, 'fpr': 0.17902313624678665, 'f1score': 0.5443554480882575, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8250728862973761, 'error': 2.6067961165048543, 'precision': 0.2568835098335855, 'tpr': 0.8250728862973761, 'fpr': 0.2086483731203806, 'f1score': 0.39178587909552376, 'norm': 0.24321273478208738, 'payoff': 3.363583381722767}}
#     records.append(record)
#     record = {'testing error on original training data and original testing data': {'recall': 0.8079601990049752, 'error': 0, 'precision': 0.342327150084317, 'tpr': 0.8079601990049752, 'fpr': 0.13225943196269604, 'f1score': 0.4809002072845721, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8449612403100775, 'error': 5.349740932642487, 'precision': 0.4890633763320247, 'tpr': 0.8449612403100775, 'fpr': 0.07741332426920462, 'f1score': 0.6195381882770871, 'norm': 0.22248840042438456, 'payoff': 6.127252532218103}, 'training error on original training data and original testing data': {'recall': 0.6054776654711445, 'error': 0, 'precision': 0.5101648351648351, 'tpr': 0.6054776654711445, 'fpr': 0.18319120517825954, 'f1score': 0.5537498136275533, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.831041257367387, 'error': 5.349740932642487, 'precision': 0.391304347826087, 'tpr': 0.831041257367387, 'fpr': 0.1116958071634697, 'f1score': 0.5320754716981132, 'norm': 0.22248840042438456, 'payoff': 6.127252532218103}}
#     records.append(record)
#     record = {'testing error on original training data and original testing data': {'recall': 0.7967244701348748, 'error': 0, 'precision': 0.37051971326164873, 'tpr': 0.7967244701348748, 'fpr': 0.11945247406903588, 'f1score': 0.5058103975535169, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8099415204678363, 'error': 0.3583955829814875, 'precision': 0.3064159292035398, 'tpr': 0.8099415204678363, 'fpr': 0.1597587905554612, 'f1score': 0.4446227929373997, 'norm': 0.4271933729827174, 'payoff': 0.9312022099987701}, 'training error on original training data and original testing data': {'recall': 0.6004507405022537, 'error': 0, 'precision': 0.5210952780106175, 'tpr': 0.6004507405022537, 'fpr': 0.176810398184444, 'f1score': 0.5579655946148093, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7902439024390244, 'error': 0.3583955829814875, 'precision': 0.19814090019569472, 'tpr': 0.7902439024390244, 'fpr': 0.2783864118895966, 'f1score': 0.3168394289067084, 'norm': 0.4271933729827174, 'payoff': 0.9312022099987701}}
#     records.append(record)
#     record = {'testing error on original training data and original testing data': {'recall': 0.8170254403131115, 'error': 0, 'precision': 0.3417928776094965, 'tpr': 0.8170254403131115, 'fpr': 0.13652572592969944, 'f1score': 0.481962481962482, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8568646543330087, 'error': 9.246018849528761, 'precision': 0.497456189937818, 'tpr': 0.8568646543330087, 'fpr': 0.07551176420623461, 'f1score': 0.6294706723891274, 'norm': 0.3156680454511367, 'payoff': 9.930350804077625}, 'training error on original training data and original testing data': {'recall': 0.6026597469996756, 'error': 0, 'precision': 0.519284516489659, 'tpr': 0.6026597469996756, 'fpr': 0.17700936503035916, 'f1score': 0.5578741930641045, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7, 'error': 9.246018849528761, 'precision': 0.14621780571892112, 'tpr': 0.7, 'fpr': 0.3576890399320306, 'f1score': 0.24190572051669182, 'norm': 0.3156680454511367, 'payoff': 9.930350804077625}}
#     records.append(record)
#     record = {'testing error on original training data and original testing data': {'recall': 0.8154296875, 'error': 0, 'precision': 0.3424938474159147, 'tpr': 0.8154296875, 'fpr': 0.13612432065217392, 'f1score': 0.4823801270941652, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8218780251694094, 'error': 9.174725983236621, 'precision': 0.4873708381171068, 'tpr': 0.8218780251694094, 'fpr': 0.0758902014107249, 'f1score': 0.6118918918918919, 'norm': 0.6399918170285073, 'payoff': 9.534734166208114}, 'training error on original training data and original testing data': {'recall': 0.5755418958265933, 'error': 0, 'precision': 0.5120898100172712, 'tpr': 0.5755418958265933, 'fpr': 0.17458028633226902, 'f1score': 0.541964965727342, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.6702439024390244, 'error': 9.174725983236621, 'precision': 0.12582417582417582, 'tpr': 0.6702439024390244, 'fpr': 0.40535031847133757, 'f1score': 0.21187355435620664, 'norm': 0.6399918170285073, 'payoff': 9.534734166208114}}
#     records.append(record)
#     record = {'testing error on original training data and original testing data': {'recall': 0.8338164251207729, 'error': 0, 'precision': 0.36848847139197266, 'tpr': 0.8338164251207729, 'fpr': 0.12571185720356992, 'f1score': 0.5111045306485046, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8431752178121975, 'error': 0.05471391417425228, 'precision': 0.4985689753863766, 'tpr': 0.8431752178121975, 'fpr': 0.0744454831307895, 'f1score': 0.6266187050359712, 'norm': 0.3238329340992916, 'payoff': 0.7308809800749607}, 'training error on original training data and original testing data': {'recall': 0.5896272285251215, 'error': 0, 'precision': 0.5132618510158014, 'tpr': 0.5896272285251215, 'fpr': 0.17756047349459597, 'f1score': 0.5488007240911148, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7253176930596286, 'error': 0.05471391417425228, 'precision': 0.1793570219966159, 'tpr': 0.7253176930596286, 'fpr': 0.28827375392714616, 'f1score': 0.2875968992248062, 'norm': 0.3238329340992916, 'payoff': 0.7308809800749607}}
#     records.append(record)
#     record = {'testing error on original training data and original testing data': {'recall': 0.8114511352418559, 'error': 0, 'precision': 0.363395225464191, 'tpr': 0.8114511352418559, 'fpr': 0.12216849071010435, 'f1score': 0.5019847328244275, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8352941176470589, 'error': 0.0051666666666666675, 'precision': 0.4824462061155153, 'tpr': 0.8352941176470589, 'fpr': 0.07758913412563667, 'f1score': 0.6116295764536971, 'norm': 0.23822431446430148, 'payoff': 0.7669423522023653}, 'training error on original training data and original testing data': {'recall': 0.5717085919634106, 'error': 0, 'precision': 0.5147058823529411, 'tpr': 0.5717085919634106, 'fpr': 0.16942191190060582, 'f1score': 0.5417118093174431, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7196896217264791, 'error': 0.0051666666666666675, 'precision': 0.16707948660211663, 'tpr': 0.7196896217264791, 'fpr': 0.31430028039765484, 'f1score': 0.2711988304093567, 'norm': 0.23822431446430148, 'payoff': 0.7669423522023653}}
#     records.append(record)
#     record = {'testing error on original training data and original testing data': {'recall': 0.8250244379276638, 'error': 0, 'precision': 0.34128588758592804, 'tpr': 0.8250244379276638, 'fpr': 0.138320455124395, 'f1score': 0.482837528604119, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8571428571428571, 'error': 4.292437520285621, 'precision': 0.4437596302003082, 'tpr': 0.8571428571428571, 'fpr': 0.09184192672998644, 'f1score': 0.584771573604061, 'norm': 0.6505834171570459, 'payoff': 4.641854103128575}, 'training error on original training data and original testing data': {'recall': 0.5887758450935346, 'error': 0, 'precision': 0.5079275198187996, 'tpr': 0.5887758450935346, 'fpr': 0.17820157900133293, 'f1score': 0.5453716370269038, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7409579667644184, 'error': 4.292437520285621, 'precision': 0.1947584789311408, 'tpr': 0.7409579667644184, 'fpr': 0.26611191305086185, 'f1score': 0.30844354018311293, 'norm': 0.6505834171570459, 'payoff': 4.641854103128575}}
#     records.append(record)
#     record = {'testing error on original training data and original testing data': {'recall': 0.810126582278481, 'error': 0, 'precision': 0.35374149659863946, 'tpr': 0.810126582278481, 'fpr': 0.12910897817038988, 'f1score': 0.49245338857650195, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.842, 'error': 0.10628238341968912, 'precision': 0.46416758544652703, 'tpr': 0.842, 'fpr': 0.08237288135593221, 'f1score': 0.5984363894811656, 'norm': 0.23983366015721397, 'payoff': 0.8664487232624751}, 'training error on original training data and original testing data': {'recall': 0.592156862745098, 'error': 0, 'precision': 0.5099915564311849, 'tpr': 0.592156862745098, 'fpr': 0.17874743326488707, 'f1score': 0.5480114925147437, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7771260997067448, 'error': 0.10628238341968912, 'precision': 0.19073896353166986, 'tpr': 0.7771260997067448, 'fpr': 0.2864057060371911, 'f1score': 0.3062993642843383, 'norm': 0.23983366015721397, 'payoff': 0.8664487232624751}}
#     records.append(record)
#     record = {'testing error on original training data and original testing data': {'recall': 0.8017664376840039, 'error': 0, 'precision': 0.3435660218671152, 'tpr': 0.8017664376840039, 'fpr': 0.1325014854426619, 'f1score': 0.4810126582278481, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8435972629521017, 'error': 11.06562703053931, 'precision': 0.4728767123287671, 'tpr': 0.8435972629521017, 'fpr': 0.0816846395516685, 'f1score': 0.6060393258426966, 'norm': 0.28957343623745757, 'payoff': 11.776053594301853}, 'training error on original training data and original testing data': {'recall': 0.590715920235371, 'error': 0, 'precision': 0.5054545454545455, 'tpr': 0.590715920235371, 'fpr': 0.18150087260034903, 'f1score': 0.5447693699125716, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8490749756572541, 'error': 11.06562703053931, 'precision': 0.2756876383180525, 'tpr': 0.8490749756572541, 'fpr': 0.1945978085449758, 'f1score': 0.4162291169451074, 'norm': 0.28957343623745757, 'payoff': 11.776053594301853}}
#     records.append(record)
    
    # Following are results for experiment when error is 1-recall
    
    record = {'testing error on original training data and original testing data': {'recall': 0.8166828322017459, 'error': 0, 'precision': 0.350541215653622, 'tpr': 0.8166828322017459, 'fpr': 0.1325516186591894, 'f1score': 0.4905330614622779, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8462291870714985, 'error': 0.632952691680261, 'precision': 0.48268156424581005, 'tpr': 0.8462291870714985, 'fpr': 0.07861448340266576, 'f1score': 0.6147278548559232, 'norm': 0.3522083554977504, 'payoff': 1.2807443361825106}, 'training error on original training data and original testing data': {'recall': 0.586105675146771, 'error': 0, 'precision': 0.5096426545660806, 'tpr': 0.586105675146771, 'fpr': 0.1776248202177933, 'f1score': 0.5452063106796117, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7064579256360078, 'error': 0.632952691680261, 'precision': 0.19125827814569538, 'tpr': 0.7064579256360078, 'fpr': 0.25921209033791814, 'f1score': 0.30102147175317906, 'norm': 0.3522083554977504, 'payoff': 1.2807443361825106}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8305905130687319, 'error': 0, 'precision': 0.4022503516174402, 'tpr': 0.8305905130687319, 'fpr': 0.10835387099515595, 'f1score': 0.542008843967151, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8493150684931506, 'error': 8.121349772874757, 'precision': 0.496, 'tpr': 0.8493150684931506, 'fpr': 0.0748853795211411, 'f1score': 0.6262626262626263, 'norm': 0.6814581846842014, 'payoff': 8.439891588190555}, 'training error on original training data and original testing data': {'recall': 0.5706840390879478, 'error': 0, 'precision': 0.5028702640642939, 'tpr': 0.5706840390879478, 'fpr': 0.17800616649537512, 'f1score': 0.5346353371986573, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.6804619826756496, 'error': 8.121349772874757, 'precision': 0.13725490196078433, 'tpr': 0.6804619826756496, 'fpr': 0.37785902559306184, 'f1score': 0.2284329563812601, 'norm': 0.6814581846842014, 'payoff': 8.439891588190555}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8299516908212561, 'error': 0, 'precision': 0.35657949356579494, 'tpr': 0.8299516908212561, 'fpr': 0.1317467063323417, 'f1score': 0.4988385598141696, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8468292682926829, 'error': 19.49119373776908, 'precision': 0.4614566719829878, 'tpr': 0.8468292682926829, 'fpr': 0.08602972399150743, 'f1score': 0.5973847212663455, 'norm': 0.5592743557243125, 'payoff': 19.931919382044768}, 'training error on original training data and original testing data': {'recall': 0.6, 'error': 0, 'precision': 0.5175611126720989, 'tpr': 0.6, 'fpr': 0.176464542651593, 'f1score': 0.5557399306079348, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8334956183057449, 'error': 19.49119373776908, 'precision': 0.4911072862880092, 'tpr': 0.8334956183057449, 'fpr': 0.07534188397179988, 'f1score': 0.6180505415162455, 'norm': 0.5592743557243125, 'payoff': 19.931919382044768}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8181818181818182, 'error': 0, 'precision': 0.3635582294800172, 'tpr': 0.8181818181818182, 'fpr': 0.12587115417304096, 'f1score': 0.5034216007140732, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8245264207377866, 'error': 0.24812275546849494, 'precision': 0.45766463752075265, 'tpr': 0.8245264207377866, 'fpr': 0.08307196744935152, 'f1score': 0.5886120996441281, 'norm': 0.41607379244470966, 'payoff': 0.8320489630237852}, 'training error on original training data and original testing data': {'recall': 0.6009174311926605, 'error': 0, 'precision': 0.5039846111569113, 'tpr': 0.6009174311926605, 'fpr': 0.18516618793598688, 'f1score': 0.5481990733821551, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.72265625, 'error': 0.24812275546849494, 'precision': 0.17969888295288974, 'tpr': 0.72265625, 'fpr': 0.2868546195652174, 'f1score': 0.28782574873590044, 'norm': 0.41607379244470966, 'payoff': 0.8320489630237852}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8316929133858267, 'error': 0, 'precision': 0.3419668150546338, 'tpr': 0.8316929133858267, 'fpr': 0.1379837067209776, 'f1score': 0.48465729853742473, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8446411012782694, 'error': 0.09125326370757181, 'precision': 0.4301452178267401, 'tpr': 0.8446411012782694, 'fpr': 0.09657981838241535, 'f1score': 0.5700066357000664, 'norm': 0.262791954761878, 'payoff': 0.8284613089456938}, 'training error on original training data and original testing data': {'recall': 0.6053577262332571, 'error': 0, 'precision': 0.5138657792567942, 'tpr': 0.6053577262332571, 'fpr': 0.17999794640106787, 'f1score': 0.5558722063896805, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7704280155642024, 'error': 0.09125326370757181, 'precision': 0.20491591203104786, 'tpr': 0.7704280155642024, 'fpr': 0.2610431532449881, 'f1score': 0.3237277743715512, 'norm': 0.262791954761878, 'payoff': 0.8284613089456938}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8091528724440117, 'error': 0, 'precision': 0.3519695044472681, 'tpr': 0.8091528724440117, 'fpr': 0.1299583793425635, 'f1score': 0.49055489964580873, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8620019436345967, 'error': 0.004809791597750579, 'precision': 0.49887514060742405, 'tpr': 0.8620019436345967, 'fpr': 0.07569450344065924, 'f1score': 0.6319914499465622, 'norm': 0.2733881309444355, 'payoff': 0.731421660653315}, 'training error on original training data and original testing data': {'recall': 0.6018246985988921, 'error': 0, 'precision': 0.506166072896684, 'tpr': 0.6018246985988921, 'fpr': 0.18518137909772892, 'f1score': 0.549866031557011, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8226120857699805, 'error': 0.004809791597750579, 'precision': 0.24393063583815028, 'tpr': 0.8226120857699805, 'fpr': 0.2221844742653304, 'f1score': 0.3762817654926438, 'norm': 0.2733881309444355, 'payoff': 0.731421660653315}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8163064833005894, 'error': 0, 'precision': 0.36304062909567497, 'tpr': 0.8163064833005894, 'fpr': 0.12374809030724834, 'f1score': 0.5025703054127608, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.84106614017769, 'error': 7.397975840679073, 'precision': 0.48657909765848084, 'tpr': 0.84106614017769, 'fpr': 0.07627046746415543, 'f1score': 0.6164978292329957, 'norm': 0.4999173777131576, 'payoff': 7.898058462965916}, 'training error on original training data and original testing data': {'recall': 0.5846153846153846, 'error': 0, 'precision': 0.509703196347032, 'tpr': 0.5846153846153846, 'fpr': 0.1762955361723961, 'f1score': 0.5445952126848606, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.733847637415622, 'error': 7.397975840679073, 'precision': 0.15854166666666666, 'tpr': 0.733847637415622, 'fpr': 0.3433647878942447, 'f1score': 0.26075038547198903, 'norm': 0.4999173777131576, 'payoff': 7.898058462965916}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8212180746561886, 'error': 0, 'precision': 0.3417825020441537, 'tpr': 0.8212180746561886, 'fpr': 0.13664912578509592, 'f1score': 0.48267898383371827, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8458536585365853, 'error': 6.280209013716524, 'precision': 0.4811320754716981, 'tpr': 0.8458536585365853, 'fpr': 0.07940552016985138, 'f1score': 0.6133710647329325, 'norm': 0.6115342857158943, 'payoff': 6.66867472800063}, 'training error on original training data and original testing data': {'recall': 0.5864217776320105, 'error': 0, 'precision': 0.5108571428571429, 'tpr': 0.5864217776320105, 'fpr': 0.1755717362321813, 'f1score': 0.5460375629867156, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8382352941176471, 'error': 6.280209013716524, 'precision': 0.25591140377132593, 'tpr': 0.8382352941176471, 'fpr': 0.21103565365025467, 'f1score': 0.39211190094015136, 'norm': 0.6115342857158943, 'payoff': 6.66867472800063}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.841948310139165, 'error': 0, 'precision': 0.38552571688666365, 'tpr': 0.841948310139165, 'fpr': 0.11446498219433611, 'f1score': 0.528879175772713, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8381046396841066, 'error': 5.702614379084967, 'precision': 0.49018475750577367, 'tpr': 0.8381046396841066, 'fpr': 0.0749130397895987, 'f1score': 0.6185792349726776, 'norm': 0.6451898086495547, 'payoff': 6.057424570435412}, 'training error on original training data and original testing data': {'recall': 0.5872656755009696, 'error': 0, 'precision': 0.5169274537695591, 'tpr': 0.5872656755009696, 'fpr': 0.17494333402019369, 'f1score': 0.5498562566197609, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.8442703232125367, 'error': 5.702614379084967, 'precision': 0.42631058358061324, 'tpr': 0.8442703232125367, 'fpr': 0.09848034637914933, 'f1score': 0.5665461715412422, 'norm': 0.6451898086495547, 'payoff': 6.057424570435412}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8214285714285714, 'error': 0, 'precision': 0.3376984126984127, 'tpr': 0.8214285714285714, 'fpr': 0.14187351241074464, 'f1score': 0.47862767154105734, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8501945525291829, 'error': 0.4550653594771242, 'precision': 0.4932279909706546, 'tpr': 0.8501945525291829, 'fpr': 0.07628270472307169, 'f1score': 0.6242857142857143, 'norm': 0.4016356239031291, 'payoff': 1.053429735573995}, 'training error on original training data and original testing data': {'recall': 0.6139717940308298, 'error': 0, 'precision': 0.5124555160142349, 'tpr': 0.6139717940308298, 'fpr': 0.18264793354527742, 'f1score': 0.55863921217547, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.7573385518590998, 'error': 0.4550653594771242, 'precision': 0.1712768311573357, 'tpr': 0.7573385518590998, 'fpr': 0.31796569876040076, 'f1score': 0.2793719545208446, 'norm': 0.4016356239031291, 'payoff': 1.053429735573995}}
    records.append(record)
    record = {'testing error on original training data and original testing data': {'recall': 0.8287937743190662, 'error': 0, 'precision': 0.3459196102314251, 'tpr': 0.8287937743190662, 'fpr': 0.13685015290519878, 'f1score': 0.48811228874248064, 'norm': 1, 'payoff': 0}, 'testing error on original training data and manipulated testing data': {'recall': 0.8526829268292683, 'error': 0.46028645833333337, 'precision': 0.4810126582278481, 'tpr': 0.8526829268292683, 'fpr': 0.08008492569002124, 'f1score': 0.6150598170302604, 'norm': 0.3239408112316269, 'payoff': 1.1363456471017066}, 'training error on original training data and original testing data': {'recall': 0.6066536203522505, 'error': 0, 'precision': 0.5126791620727673, 'tpr': 0.6066536203522505, 'fpr': 0.181631395109924, 'f1score': 0.5557215416791156, 'norm': 1, 'payoff': 1}, 'testing error on manipulated training data and manipulated testing data': {'recall': 0.81648675171737, 'error': 0.46028645833333337, 'precision': 0.2798520013454423, 'tpr': 0.81648675171737, 'fpr': 0.1817332993803582, 'f1score': 0.4168336673346693, 'norm': 0.3239408112316269, 'payoff': 1.1363456471017066}}
    records.append(record)

    l1 = []
    l2 = []
    l3 = []
    
    for record in records:
        l1.append(record['testing error on original training data and original testing data'][str(perfmetric)])
        l2.append(record['testing error on original training data and manipulated testing data'][str(perfmetric)])
        l3.append(record['testing error on manipulated training data and manipulated testing data'][str(perfmetric)])
#         l.append(record['training error on original training data and original testing data']['precision'])
        
    print('Output results for ',perfmetric)
    ttest=stats.ttest_ind(l1,l2,equal_var=True)
    print 't-statistic independent = %6.3f pvalue = %6.4f on manipulated testing' % ttest
#     ttest=stats.ttest_rel(l1,l2)
#     print 't-statistic dependent = %6.3f pvalue = %6.4f' % ttest
    
    ttest=stats.ttest_ind(l1,l3,equal_var=True)
    print 't-statistic independent = %6.3f pvalue = %6.4f on manipulated training and manipulated testing' % ttest

    ttest=stats.ttest_ind(l2,l3,equal_var=True)
    print 't-statistic independent = %6.3f pvalue = %6.4f on manipulated testing and manipulated training/testing' % ttest

    a = np.array([l1,l2,l3])
    friedmantest = stats.friedmanchisquare(*(a[i, :] for i in range(a.shape[0])))
    print 'friedmantest-statistic = %6.3f pvalue = %6.4f' % friedmantest

    print('l1',l1)
    print('l2',l2)
    print('l3',l3)

    print('len(l1)',len(l1))
    print('len(l2)',len(l2))
    print('len(l3)',len(l3))
    print 'Need to have length of l to be 20'
    

    
if __name__ == '__main__':
    
#     InDir = '/home/aneesh/Documents/AdversarialLearningDatasets/Caltech101/'
#     partitoner(InDir)
#    resizer('/home/aneesh/Documents/AdversarialLearningDatasets/Caltech101/101_ObjectCategories_Train/crocodile/')
#    resizer('/home/aneesh/Documents/AdversarialLearningDatasets/Caltech101/101_ObjectCategories_Train/crocodile_head/')

#    resizer('/home/aneesh/Documents/AdversarialLearningDatasets/Caltech101/101_ObjectCategories_Test/crocodile/')
#    resizer('/home/aneesh/Documents/AdversarialLearningDatasets/Caltech101/101_ObjectCategories_Test/crocodile_head/')
        

    InDir = '/home/aneesh/Documents/AdversarialLearningDatasets/ILSVRC2010/' 
    GameInDir = '/home/aneesh/Documents/AdversarialLearningDatasets/ILSVRC2010/cifar10_data/imagenet2010-batches-bin/'

#     partitoner(InDir)
   
#     resizer(InDir+'TrainSplit/BrownDog/')
#     resizer(InDir+'TrainSplit/BlackDog/')
#   
#     resizer(InDir+'TestSplit/BrownDog/')
#     resizer(InDir+'TestSplit/BlackDog/')

#     resizer(InDir+'TrainSplit/SmallCat/')
#     resizer(InDir+'TestSplit/SmallCat/')

#     binarizer(InDir,'TrainSplit/','train.bin')
#     copyfile(InDir + 'train.bin', GameInDir + 'train.bin')
# #      
#     binarizer(InDir,'TestSplit/','test.bin')
#     copyfile(InDir + 'test.bin', GameInDir + 'test.bin')    generatereports()

#     generatereports()
#     trainplots()
#     ttest()
#     gaplots()


    resizer('/home/aneesh/Documents/AdversarialLearningDatasets/ILSVRC2010/'+'AdversarialSplit/BrownDog/')
    resizer('/home/aneesh/Documents/AdversarialLearningDatasets/ILSVRC2010/'+'AdversarialSplit/SmallCat/')
     
#     resizer('/home/aneesh/Documents/AdversarialLearningDatasets/ILSVRC2010/'+'TestSplit/BrownDog/')
#     resizer('/home/aneesh/Documents/AdversarialLearningDatasets/ILSVRC2010/'+'TestSplit/SmallCat/')
    
        